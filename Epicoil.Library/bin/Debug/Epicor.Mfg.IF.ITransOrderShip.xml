<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Epicor.Mfg.IF.ITransOrderShip</name>
    </assembly>
    <members>
        <member name="T:Epicor.Mfg.BO.TransOrderShipDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TransOrderShipDataSet.TFShipHeadDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TransOrderShipDataSet.TFShipHeadAttchDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TransOrderShipDataSet.TFShipDtlDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TransOrderShipDataSet.ShipCOODataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TransOrderShipDataSet.TFShipUPSDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TransOrderShipDataSet.SelectedSerialNumbersDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TransOrderShipDataSet.SNFormatDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TransOrderShipDataSet.TFShipHeadRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TransOrderShipDataSet.TFShipHeadAttchRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TransOrderShipDataSet.TFShipDtlRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TransOrderShipDataSet.ShipCOORow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TransOrderShipDataSet.TFShipUPSRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TransOrderShipDataSet.SelectedSerialNumbersRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TransOrderShipDataSet.SNFormatRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TransOrderShipDataSet.TFShipHeadRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TransOrderShipDataSet.TFShipHeadAttchRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TransOrderShipDataSet.TFShipDtlRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TransOrderShipDataSet.ShipCOORowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TransOrderShipDataSet.TFShipUPSRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TransOrderShipDataSet.SelectedSerialNumbersRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TransOrderShipDataSet.SNFormatRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.IF.ITransOrderShip">
            <summary>
            Transfer Order Shipment Entry
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.GetNewTFShipHead(Epicor.Mfg.BO.TransOrderShipDataSet)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.GetNewTFShipHeadAttch(Epicor.Mfg.BO.TransOrderShipDataSet,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.GetNewTFShipDtl(Epicor.Mfg.BO.TransOrderShipDataSet,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.GetNewShipCOO(Epicor.Mfg.BO.TransOrderShipDataSet,System.String,System.Int32,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.GetNewTFShipUPS(Epicor.Mfg.BO.TransOrderShipDataSet,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.DeleteByID(System.Int32)">
            <summary>
            Deletes a row given its ID.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.GetByID(System.Int32)">
            <summary>
            Returns a DataSet given the primary key.
            </summary>
            <returns>The DataSet.</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.GetList(System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Returns a list of rows that satisfy the where clause.
            </summary>
            <param name="whereClause">An expression used to filter the rows. Can be left blank for all rows.</param>
            <param name="pageSize">The maximum number of rows to return. Leave as zero for no maximum.</param>
            <param name="absolutePage">Page of rows to return.</param>
            <param name="morePages">Whether there are more pages of rows available.</param>
            <returns>The list DataSet.</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.GetRows(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Returns a dataset containing all rows that satisfy the where clauses.
            </summary>
            <returns>The full DataSet.</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.Update(Epicor.Mfg.BO.TransOrderShipDataSet)">
            <summary>
            Commits the DataSet changes to the data store.
            </summary>
            <param name="ds">The full DataSet.</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.UpdateExt(Epicor.Mfg.BO.UpdExtTransOrderShipDataSet,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Apply input data to BO by calling GetByID/GetNew/Update methods.
            </summary>
            <returns>The dataset with list of errors occured during update process.</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.GetCodeDescList(System.String,System.String)">
            <summary>
            To return the CodeDescriptionList values of a given table.field.
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.NegativeInventoryTest(System.String,System.String,System.String,System.String,System.String,System.Decimal,System.Decimal,System.String@,System.String@)">
            <summary>
            To test on hand quantity of the bin - i.e. whether it will go negative.
            Call this method on change of Quantity.
            </summary>
            <param name="pcPartNum">Part Number</param>
            <param name="pcWhseCode">Warehouse Code</param>
            <param name="pcBinNum">Bin Number</param>
            <param name="pcLotNum">Lot Number</param>
            <param name="pcDimCode">From UNIT OF MEASURE (old Dimension Code)</param>
            <param name="pdDimConvFactor">Obsolete Dimension Conversion Factor</param>
            <param name="pdTranQty">Quantity (in stocking uom)</param>
            <param name="pcNeqQtyAction">Valid values are STOP, NONE or ASK User. If Ask User, the user can decide to go ahead with the update even if the qty is negative</param>
            <param name="pcMessage">Error message passed back from the business logic.</param>
            <returns>pcNeqQtyAction</returns>
            <returns>pcMessage</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.GetAvailTranDocTypes(System.String@)">
            <remarks>
            &amp;QTableName - MANDATORY - Name of table to find
            &amp;QLock - type of lock to put on record NO-LOCK (default) or EXCLUSIVE-LOCK
            &amp;QWhere - MANDATORY - criteria to find record
            &amp;QFind - type of find to perform, unique, first, next or last
            &amp;Columns - List of columns
            </remarks>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.AssignLegalNumber(System.Int32,Epicor.Mfg.BO.LegalNumGenOptsDataSet,System.String@)">
            <summary>
            Assigns a legal number to the subcontract shipment.
            </summary>
            <param name="ipPackNum">Packing Slip number</param>
            <param name="ds" type="Epicor.Mfg.BO.LegalNumGenOptsDataSet"></param>
            <param name="opLegalNumMsg">Legal number message</param>
            <returns type="Epicor.Mfg.BO.TransOrderShipDataSet">The Subcontract Shipment data set </returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.CalculateWeight(System.Int32,System.Decimal@)">
            <summary>calculate the weight of a carton based upon Part.Weight.</summary>
            <param name="cartonNumber">Carton Number</param>
            <param name="calculatedWeight">Shipment weight based upon part values</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.ChangePackOutLotNum(Epicor.Mfg.BO.PackOutDataSet)">
            <summary>
            This methods validates PackOut.LotNum field
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.PackOutDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.ChangeStatus(System.String,System.String)">
            <summary>
            This method will be called to perform a change in the header status.
            </summary>
            <param name="ipShipHedRowID"> Unique Identifier for the Transfer Order Shipment</param>
            <param name="ipStatus"> Selected Status.
            Valid Options: Open, Close, Void, UnVoid, Freight, UnFreight, Stage</param>
            <returns type="Epicor.Mfg.BO.TransOrderShipDataSet"></returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.ChangeTFOrdDtlLotNum(Epicor.Mfg.BO.TranDirectOrderDataSet)">
            <summary>
            This methods creates PartLot record if criteria is met in CheckTFOrdDtlLotNum
            This method should run when the TFOrdDtl.LotNum field changes AND
            after the running of CheckTFOrdDtlLotNum (which potentially returns questions/errors).
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.TranDirectOrderDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.ChangeTFOrdDtlOurStockQty(System.Decimal,Epicor.Mfg.BO.TranDirectOrderDataSet)">
            <summary>
            This methods updates fields associated with TFOrdDtl.OurStockQty.
            This method should run when the TFOrdDtl.DisplayShipQty field changes.
            </summary>
            <param name="ipProposedOurStockQty">The new proposed TFOrdDtl.DisplayShipQty value</param>
            <param name="ds" type="Epicor.Mfg.BO.TranDirectOrderDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.ChangeTFOrdDtlOurStockQtyUOM(System.String,Epicor.Mfg.BO.TranDirectOrderDataSet)">
            <summary>
            This methods updates fields associated with TFOrdDtl.OurStockQty.
            This method should run when the TFOrdDtl.SellingQtyUOM field changes.
            </summary>
            <param name="ipProposedSellingQtyUOM">The new proposed TFOrdDtl.SellingQtyUOM value</param>
            <param name="ds">Transfer Direct Order Dataset</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.ChangeTFOrdDtlPartNum(Epicor.Mfg.BO.TranDirectOrderDataSet)">
            <summary>
            This method defaults fields associated with the partnum.
            This method should run when the TFOrdDtl.PartNum field changes.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.TranDirectOrderDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.ChangeTFOrdDtlWarehouseCode(System.String,Epicor.Mfg.BO.TranDirectOrderDataSet)">
            <summary>
            This methods updates fields associated with TFOrdDtl.WarehouseCode.
            This method should run when the TFOrdDtl.WarehouseCode field changes.
            </summary>
            <param name="ipProposedWarehouseCode">The new proposed TFOrdDtl.WarehouseCode value</param>
            <param name="ds" type="Epicor.Mfg.BO.TranDirectOrderDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.ChangeTFShipDtlLotNum(Epicor.Mfg.BO.TransOrderShipDataSet)">
            <summary>
            This methods creates PartLot record if criteria is met in CheckTFShipDtlLotNum
            This method should run when the TFShipDtl.LotNum field changes AND
            after the running of CheckTFShipDtlLotNum (which potentially returns questions/errors).
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.TransOrderShipDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.ChangeTFShipDtlOurStockShippedQty(System.Int32,System.Int32,System.Decimal,Epicor.Mfg.BO.TransOrderShipDataSet,System.String@,System.String@,System.Decimal@)">
            <summary>
            This methods updates fields associated with TFShipDtl.OurStockShippedQty.
            This method should run when the TFShipDtl.DisplayShipQty field changes.
            </summary>
            <param name="packNum">Pack Number to be modified</param>
            <param name="packLine">Pack Line to be modified</param>
            <param name="ipProposedOurStockShippedQty">The new proposed TFShipDtl.DisplayShipQty value</param>
            <param name="ds" type="Epicor.Mfg.BO.TransOrderShipDataSet"></param>
            <param name="outMessage">negative quantity message</param>
            <param name="outNegQtyAction">action that needs to be taken if the quantity is negative</param>
            <param name="outNetWeight">total weight based upon part</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.ChangeTFShipDtlPartNum(Epicor.Mfg.BO.TransOrderShipDataSet)">
            <summary>
            This method defaults fields associated with the partnum.
            This method should run when the TFShipDtl.PartNum field changes.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.TransOrderShipDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.ChangeTFShipDtlTFOrderLine(Epicor.Mfg.BO.TransOrderShipDataSet)">
            <summary>
            This methods updates TFShipDtl.ShippedQty if criteria is met in CheckTFShipDtlTFOrderLine
            This method should run when the TFShipDtl.TFOrdLine field changes AND
            after the running of CheckTFShipDtlTFOrderline (which potentially returns errors).
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.TransOrderShipDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.ChangeTFShipDtlTFOrderNum(System.String,Epicor.Mfg.BO.TransOrderShipDataSet)">
            <summary>
            This methods validates the TFShipDtl.TFOrdNum field and updates associated fields.
            This method should run when the TFShipDtl.TFOrdNum field changes.
            </summary>
            <param name="ipProposedTFOrdNum">The new proposed TFShipDtl.TFOrdNum value</param>
            <param name="ds" type="Epicor.Mfg.BO.TransOrderShipDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.ChangeTFShipDtlWarehouseCode(System.Int32,System.Int32,System.String,Epicor.Mfg.BO.TransOrderShipDataSet)">
            <summary>
            This methods updates fields associated with TFShipDtl.WarehouseCode.
            This method should run when the TFShipDtl.WarehouseCode field changes.
            </summary>
            <param name="packNum">Pack Number to be modified</param>
            <param name="packLine">Pack Line to be modified</param>
            <param name="ipProposedWarehouseCode">The new proposed TFShipDtl.WarehouseCode value</param>
            <param name="ds" type="Epicor.Mfg.BO.TransOrderShipDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.CheckDirectOrderLine(Epicor.Mfg.BO.TranDirectOrderDataSet,System.String@)">
            <summary>
            This method is to be run before the CreateDirectOrderLine. Any message returned
            needs to be displayed to the user. If they answer no to any the messages
            then don't run the CreateDirectOrderLine method.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.TranDirectOrderDataSet"></param>
            <param name="allocationMessage">If overriding allocations, ask user if they want to continue</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.CheckOHQ(Epicor.Mfg.BO.TranDirectOrderDataSet,System.String@)">
            <summary>
            This method is to be run before the CreateDirectOrderLine check the on hand
            quantity of the part. It will return a message in inventoryMessage if the
            on hand quantity is less than zero. If inventory message isn't null, then
            it needs to be displayed to the user. If they answer no to the question
            then don't run the CreateDirectOrderLine method.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.TranDirectOrderDataSet"></param>
            <param name="inventoryMessage">If the inventory will go negative, ask user if they want to continue</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.CheckPackOutBinNum(Epicor.Mfg.BO.PackOutDataSet,System.String)">
            <summary>
            This methods validates PackOut.BinNum field
            </summary>
            <param name="ipBinNum">The new proposed BinNum value</param>
            <param name="ds" type="Epicor.Mfg.BO.PackOutDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.CheckPackOutLotNum(Epicor.Mfg.BO.PackOutDataSet,System.String,System.String@,System.String@)">
            <summary>
            This methods validates PackOut.LotNum field
            </summary>
            <param name="ipLotNum">The new proposed LotNum value</param>
            <param name="vMsgText">Ouput Error Text value</param>
            <param name="vMsgType">Output Error Type value</param>
            <param name="ds" type="Epicor.Mfg.BO.PackOutDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.CheckPackOutOrderLine(Epicor.Mfg.BO.PackOutDataSet,System.Int32)">
            <summary>
            This methods validates PackOut.OrderLine field
            </summary>
            <param name="ipOrderLine">The new proposed OrderLine value</param>
            <param name="ds" type="Epicor.Mfg.BO.PackOutDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.CheckPackOutPartNum(Epicor.Mfg.BO.PackOutDataSet,System.String)">
            <summary>
            This methods validates PackOut.PartNum field
            </summary>
            <param name="ipPartNum">The new proposed PartNum value</param>
            <param name="ds" type="Epicor.Mfg.BO.PackOutDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.CheckPackOutTFOrdNum(Epicor.Mfg.BO.PackOutDataSet,System.String)">
            <summary>
            This methods validates PackOut.TFOrdNum field
            </summary>
            <param name="ipTFOrdNum">The new proposed TFOrdNum value</param>
            <param name="ds" type="Epicor.Mfg.BO.PackOutDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.CheckPackOutWarehousecode(Epicor.Mfg.BO.PackOutDataSet,System.String)">
            <summary>
            This methods validates PackOut.Warehousecode field
            </summary>
            <param name="ipWarehousecode">The new proposed Warehousecode value</param>
            <param name="ds" type="Epicor.Mfg.BO.PackOutDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.CheckPrePartInfo(System.String@,System.String@,System.Boolean@,System.String@)">
            <summary>
            This method checks to see if there are any questions or issues with the part entered
            and returns a message, a part number and if any substitutes exist.
            </summary>
            <param name="partNum">The input-output part number to validate and it gets returned</param>
            <param name="vMsgText">The returned message for the inputted part</param>
            <param name="vSubAvail">Returned flag stating if substitutes exist for this part</param>
            <param name="vMsgType">Type of message returned.
            Values can be; "Question" (asking if they want to use the substitute part)
            "Warning" (Warns them that a part is onhold or runout).
            "Error" (Part in Inactive, or Onhold/Runout parts are not accepted in this case).
            "Question" is asking if they want to use the substitute part.</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.CheckTFOrdDtlLotNum(System.String,System.String,System.String@,System.String@)">
            <summary>
            This method checks to see if there are any questions or issues with the lotnum entered
            and returns a message, run this before ChangeTFOrdDtlLotNum
            </summary>
            <param name="ipLotNum">The lotnum to validate</param>
            <param name="ipPartNum">The value of the TFOrdDtl.PartNum used to locate partlot records</param>
            <param name="vMsgText">The returned message for the inputted lotnum</param>
            <param name="vMsgType">Type of message returned.
            Values can be; "Question" (asking if they want to create new partlot)
            "Error" (Invalid LotNum if record doesn't exist and you don't have permissions to create
            new partlots) .
            </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.CheckTFShipDtl(Epicor.Mfg.BO.TransOrderShipDataSet,System.String@)">
            <summary>
            This method is to be run before update to ask the user any question that need to be
            answered before the record(s) can be saved. If the user answers no to any one of
            the questions, then the update method should not be called.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.TransOrderShipDataSet">Transfer Order Ship data set </param>
            <param name="allocationMessage">If this transaction overrides a allocation, ask user if they want to continue </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.CheckTFShipDtlLotNum(System.String,System.String,System.String@,System.String@)">
            <summary>
            This method checks to see if there are any questions or issues with the lotnum entered
            and returns a message, run this before ChangeTFShipDtlLotNum
            </summary>
            <param name="ipLotNum">The lotnum to validate</param>
            <param name="ipPartNum">The value of the TFShipDtl.PartNum used to locate partlot records</param>
            <param name="vMsgText">The returned message for the inputted lotnum</param>
            <param name="vMsgType">Type of message returned.
            Values can be; "Question" (asking if they want to create new partlot)
            "Error" (Invalid LotNum if record doesn't exist and you don't have permissions to create
            new partlots) .
            </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.CheckTFShipDtlTFOrderLine(System.Int32,System.Int32,System.Int32,Epicor.Mfg.BO.TransOrderShipDataSet)">
            <summary>
            This method validates the TFShipDtl.TFOrdLine and returns potential errors.
            Run this before running ChangeTFShipDtl.TFOrdLine.
            </summary>
            <param name="ipPackNum">The packnum value of the TFShipDtl to check</param>
            <param name="ipPackLine">The packline value of the TFShipDtl to check</param>
            <param name="ipProposedTFOrdLine">The proposed TFOrdline value</param>
            <param name="ds" type="Epicor.Mfg.BO.TransOrderShipDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.CheckTFShipHeadDispatchReason(System.String,Epicor.Mfg.BO.TransOrderShipDataSet)">
            <summary>
            This method validates the TFShipHead.DisptachReason field.
            This method should run before changing the TFShipHead.DisptachReason field.
            </summary>
            <param name="ipDispatchReason">Dispatch Reason</param>
            <param name="ds" type="Epicor.Mfg.BO.TransOrderShipDataSet">The TransOrderShip dataSet</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.ClearConvertedManifest(System.Int32)">
            <param name="ipPackNum">Pack Num to clear Manifest fields</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.ConvertToManifestUOM(System.Int32)">
            <param name="ipPackNum">Pack Num to populate Manifest fields</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.ConvertUOM(System.String,System.Decimal,System.String,System.String,System.Decimal@)">
            <summary>
            This method converts a qty from one UOM to another
            </summary>
            <param name="partNum">Part number</param>
            <param name="baseQty">Qty you wish to convert</param>
            <param name="baseUOM">UOM baseQty is specified in</param>
            <param name="convUOM">UOM to convert to</param>
            <param name="convQty">Qty converted to UOM specified in convUOM</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.CreateDirectOrder(Epicor.Mfg.BO.TranDirectOrderDataSet)">
            <summary>
            This method takes the the TranDirectOrder dataset and create the Transfer Order
            Header records. It will also create and send back a new TFShipHed record for the
            UI to update. The GetNewDirectOrder method must be called first.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.TranDirectOrderDataSet">The Transfer Order Dataset</param>
            <returns type="Epicor.Mfg.BO.TransOrderShipDataSet">The Transfer Shipment DataSet</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.CreateDirectOrderLine(System.String,Epicor.Mfg.BO.TransOrderShipDataSet,Epicor.Mfg.BO.TranDirectOrderDataSet)">
            <summary>
            This method takes the the TranDirectOrder dataset and creates the Transfer Order
            Detail record. It will also create and send back a new TFShipDtl record for the
            UI to update. The GetNewDirectOrderLine method must be called first.
            The update method to create the TFShipHed record must also be run before
            GetNewDirectOrderLine is called.
            </summary>
            <param name="ipShipHeadRowID">Unique Identifier for the Transfer Order Shipment</param>
            <param name="ds" type="Epicor.Mfg.BO.TransOrderShipDataSet"></param>
            <param name="ds1" type="Epicor.Mfg.BO.TranDirectOrderDataSet">The Transfer Order Dataset</param>
            <returns type="Epicor.Mfg.BO.TransOrderShipDataSet">The Transfer Shipment DataSet</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.CreateMassShipDtl(System.Int32,System.String,Epicor.Mfg.BO.TransOrderShipDataSet)">
            <summary>
            This methods creates TFShipDtl records based on the quantities remaining to be
            shipped from the transfer order.
            </summary>
            <param name="packNum">Your existing packing slip number</param>
            <param name="orderNum">The transfer order number</param>
            <param name="ds" type="Epicor.Mfg.BO.TransOrderShipDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.GetDirectOrderDS(System.String,Epicor.Mfg.BO.TranDirectOrderDataSet)">
            <summary>
            This method takes the direct transfer order number tied to the packing slip
            and returns the full Direct Order Dataset
            </summary>
            <param name="tfOrdNum">Unique Identifier for the Transfer Order</param>
            <param name="ds" type="Epicor.Mfg.BO.TranDirectOrderDataSet">The Transfer Order Dataset</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.GetDirectShipDate(Epicor.Mfg.BO.TranDirectOrderDataSet)">
            <summary>
            Sets the transfer ship date base on fromplant, toplant, and needbydate.
            It's calculated using the needby date and subtracting the transfers days
            held in the PltTranDef Table. To be called when the TFOrdDtl.NeedByDate changes
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.TranDirectOrderDataSet">The Transfer Order Dataset</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.GetLegalNumGenOpts(System.Int32,System.Boolean@)">
            <summary>
            Returns the legal number generation options.
            </summary>
            <param name="ipPackNum">Packing Slip number</param>
            <param name="opPromptForNum">Prompt for the number</param>
            <returns type="Epicor.Mfg.BO.LegalNumGenOptsDataSet">The Legal Number Generation Options dataset </returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.GetNewDirectOrder(Epicor.Mfg.BO.TranDirectOrderDataSet)">
            <summary>
            This method creates the default empty Transfer Order Header for the user to update
            before calling the CreateShipmentDirectOrder (update Order, new Shipment)
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.TranDirectOrderDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.GetNewDirectOrderLine(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},Epicor.Mfg.BO.TranDirectOrderDataSet)">
            <summary>
            This method creates an empty Transfer Order Detail record for the user to update
            before calling the CreateShipmentDirectOrderLine (update TFOrdDtl, new TFShipDtl)
            This method replaces the GetNewShipDtl method for Direct Order Shipments
            The TFOrdHed record is sent back as well for constraint reasons
            </summary>
            <param name="tfOrdNum">Transfer Order Number</param>
            <param name="needByDate">NeedByDate</param>
            <param name="requestDate">Ship Date</param>
            <param name="ds" type="Epicor.Mfg.BO.TranDirectOrderDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.GetNewFromOrder(System.String,Epicor.Mfg.BO.TransOrderShipDataSet)">
            <summary>
            This methods creates a new packing slip with header information pulled from
            the transfer order header.
            </summary>
            <param name="ordNum">The transfer order number</param>
            <param name="ds" type="Epicor.Mfg.BO.TransOrderShipDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.GetPackaging(System.String,Epicor.Mfg.BO.TransOrderShipDataSet)">
            <param name="ipPkgCode">package code</param>
            <param name="ds" type="Epicor.Mfg.BO.TransOrderShipDataSet">Transfer Shipment data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.GetPackClass(System.String,Epicor.Mfg.BO.TransOrderShipDataSet)">
            <param name="ipPkgClass">package class</param>
            <param name="ds" type="Epicor.Mfg.BO.TransOrderShipDataSet">Transfer Order Shipment data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.GetPayBTFlagDefaults(Epicor.Mfg.BO.TransOrderShipDataSet)">
            <param name="ds" type="Epicor.Mfg.BO.TransOrderShipDataSet">The transfer order data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.GetPOPackaging(System.String,Epicor.Mfg.BO.PackOutDataSet)">
            <param name="ipPkgCode">package code</param>
            <param name="ds" type="Epicor.Mfg.BO.PackOutDataSet">Transfer PackOut data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.GetPOPackClass(System.String,Epicor.Mfg.BO.PackOutDataSet)">
            <param name="ipPkgClass">package class</param>
            <param name="ds" type="Epicor.Mfg.BO.PackOutDataSet">Packout data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.GetScale(System.String,System.String@)">
            <summary>Calls GetDefaultScale</summary>
            <param name="workstationID">Workstation ID</param>
            <param name="scaleID">Scale ID</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.GetSelectSerialNumbersParams(System.String,System.String,System.String,System.Decimal,System.String,System.String,System.String)">
            <summary>
            Gets parameters required for launching Select Serial Numbers
            </summary>
            <returns>The SelectSerialNumbersParams data set</returns>
            <param name="ipPartNum">Part Number</param>
            <param name="ipWarehouseCode">Warehouse Code</param>
            <param name="ipBinNum">Bin Num</param>
            <param name="ipQuantity">Quantity</param>
            <param name="ipUOM">UOM</param>
            <param name="ipTransType">TransType</param>
            <param name="ipSourceRowID">sourceRowID</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.GetTranDocTypeID(System.String,Epicor.Mfg.BO.TransOrderShipDataSet)">
            <summary>
            Sets default values when the TranDocTypeID changes
            </summary>
            <param name="ipTranDocTypeID">TranDocTypeID supplied</param>
            <param name="ds" type="Epicor.Mfg.BO.TransOrderShipDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.POChangeStatus(System.String,Epicor.Mfg.BO.PackOutDataSet)">
            <summary>
            This method will be called to perform a change in the header status for the Pack Out screen.
            </summary>
            <param name="ipStatus">Selected Status
            Valid Options: Open, Close, Void, UnVoid, Freight, UnFreight, Stage</param>
            <param name="ds" type="Epicor.Mfg.BO.PackOutDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.POCreateDtlList(System.String,System.Int32,Epicor.Mfg.BO.PackOutDataSet)">
            <summary>
            This method copies the available Order Release lines to the PackOut datatable
            for update
            </summary>
            <param name="ipOrderNum">TFOrdNum value</param>
            <param name="ipPackNum">PackNum value</param>
            <param name="ds" type="Epicor.Mfg.BO.PackOutDataSet">Customer PackOut data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.POFindBuffer(System.Int32@,System.String@,Epicor.Mfg.BO.PackOutDataSet)">
            <summary>
            This method returns a count order of lines that match the incomming scanned criteria.
            If there is no unique match, logical fields are updated to que the UI as to what need
            to be prompted in order to find a matching order dtl.
            </summary>
            <param name="found">Number of matches to the entered line</param>
            <param name="rowident">Rowident of unique match order dtl</param>
            <param name="ds" type="Epicor.Mfg.BO.PackOutDataSet">Customer PackOUt data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.POGetDtlList(System.Int32)">
            <summary>
            This method copies the available Carton Dtl lines to the PackOut datatable
            for update
            </summary>
            <param name="ipPackNum">Carton to get the detail lines from</param>
            <returns type="Epicor.Mfg.BO.PackOutDataSet"></returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.POGetNew(System.Int32)">
            <summary>
            This method creates a new packout record for the customer shipment packout
            screen
            </summary>
            <param name="ipPackNum">Packing number</param>
            <returns type="Epicor.Mfg.BO.PackOutDataSet"></returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.POUndo(Epicor.Mfg.BO.PackOutDataSet)">
            <summary>
            This methods simulates Undo.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.PackOutDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.POUpdate(System.Int32@,Epicor.Mfg.BO.PackOutDataSet)">
             <summary>
             This method creates a new packout record to create TFShiphed and TFShipDtl records
            
             </summary>
             <returns type="Epicor.Mfg.BO.PackOutDataSet">Customer Shipment data set</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.POUpdateHeader(Epicor.Mfg.BO.PackOutDataSet)">
            <summary>
            This methods simulates Undo.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.PackOutDataSet">PackOut Dataset</param>
            <returns type="Epicor.Mfg.BO.TransOrderShipDataSet">TransOrderShip Dataset </returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.PreDeleteDirectShip(System.Int32,System.Int32,System.String@)">
            <summary>
            This method needs to be called before deleting line items. It asks the
            user if they want to delete the TFOrdDtl as well as the TFShipDtl.
            </summary>
            <param name="packNum">Pack number.</param>
            <param name="packLine">Pack line number.</param>
            <param name="cMessage">Message for the user. Null if no question needs to be asked.</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.PreDeselectSN(System.Int32,System.Int32,System.String,Epicor.Mfg.BO.TransOrderShipDataSet)">
            <summary>
            Sets PreDeselected before delete a TFOrdShipLine.
            </summary>
            <param name="ipPackNum"></param>
            <param name="ipPackLine"></param>
            <param name="ipPartNum"></param>
            <param name="ds" type="Epicor.Mfg.BO.TransOrderShipDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.SetUPSQVEnable(System.Boolean,Epicor.Mfg.BO.TransOrderShipDataSet)">
            <param name="ipQVEnable">logical indicating if the quantum view is to enabled/disabled</param>
            <param name="ds" type="Epicor.Mfg.BO.TransOrderShipDataSet">The transfer order data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.SetUPSQVShipStatus(System.String,Epicor.Mfg.BO.TransOrderShipDataSet)">
            <param name="ipShipStatus">Shipment status</param>
            <param name="ds" type="Epicor.Mfg.BO.TransOrderShipDataSet">The transfer shipment data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.ShipPackingSlip(System.String,System.Boolean)">
            <summary>
            This methods assigns the TFShipHead.Shipped field and updates/creates all of the
            associated records (partbin, parttran, TFOrdHed, etc.) when a Packing Slip is shipped.
            </summary>
            <param name="ipTFShipHeadRowid">The rowid of the TFShipHead to ship</param>
            <param name="ipReturn">Logical used to determine if you would like the dataset refreshed and brought back.</param>
            <returns type="Epicor.Mfg.BO.TransOrderShipDataSet"></returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.UnShipPackingSlip(System.String,System.Boolean)">
            <summary>
            This methods assigns the TFShipHead.Shipped field and updates/deletes all of the
            associated records (parttran) when a Packing Slip is unshipped. Also potentially creates
            partbin and partdtl records.
            </summary>
            <param name="ipTFShipHeadRowid">The rowid of the TFShipHead to unship</param>
            <param name="ipReturn">Logical used to determine if you would like the dataset refreshed and brought back.</param>
            <returns type="Epicor.Mfg.BO.TransOrderShipDataSet"></returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.ValidateBinCode(System.String,System.String)">
            <param name="ipWhse">Warehouse code used to edit bin</param>
            <param name="ipBinNum">Bin Code to validate</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.ValidatePartNum(System.String)">
            <param name="ipPartNum">Part Number</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.ValidateSN(Epicor.Mfg.BO.TransOrderShipDataSet,Epicor.Mfg.BO.TranDirectOrderDataSet,Epicor.Mfg.BO.PackOutDataSet,System.String,System.Boolean@)">
            <summary>
            Validates that a single serial number is valid for this transaction
            </summary>
            <param name="ds">The TransOrderShip data set</param>
            <param name="ds1">The TranDirectOrder data set</param>
            <param name="ds2">The Packout data set</param>
            <param name="serialNumber">Serial number to validate.</param>
            <param name="isVoided">Serial Number Voided flag</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.VoidLegalNumber(System.Int32,System.String)">
            <summary>
            Voids the legal number.
            </summary>
            <param name="ipPackNum">Packing Slip number</param>
            <param name="ipVoidedReason">Reason for the void</param>
            <returns type="Epicor.Mfg.BO.TransOrderShipDataSet">The Subcontract Shipment data set </returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.WarnNegativeBinOH(System.String,Epicor.Mfg.BO.TransOrderShipDataSet,System.String@,System.String@)">
             <summary>
            
            
             </summary>
             <param name="ipBinNum">The new proposed TFShipDtl.BinNum value</param>
             <param name="ds" type="Epicor.Mfg.BO.TransOrderShipDataSet"></param>
             <param name="outMessage">The output Message value</param>
             <param name="outNegQtyAction">The output Action value</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.WarnNegativeBinQty(System.Decimal,Epicor.Mfg.BO.TransOrderShipDataSet,System.String@,System.String@)">
            <summary>
            Procedure used to warn if negative inventory in Bin.
            </summary>
            <param name="ipDisplayQty">The new proposed TFShipDtl.DisplayShipQty value</param>
            <param name="ds" type="Epicor.Mfg.BO.TransOrderShipDataSet"></param>
            <param name="outMessage">The output Message value</param>
            <param name="outNegQtyAction">The output Action value</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.WarnNegativeLotOH(System.Int32,System.Int32,System.String,Epicor.Mfg.BO.TransOrderShipDataSet,System.String@,System.String@)">
             <summary>
            
            
             </summary>
             <param name="packNum">Pack Number to be modified</param>
             <param name="packLine">Pack Line to be modified</param>
             <param name="ipLotNum">The new proposed TFShipDtl.LotNum value</param>
             <param name="ds" type="Epicor.Mfg.BO.TransOrderShipDataSet"></param>
             <param name="outMessage">The output Message value</param>
             <param name="outNegQtyAction">The output Action value</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ITransOrderShip.isSerialTracked(System.String,System.String)">
            <remarks>
            &amp;QTableName - MANDATORY - Name of table to find
            &amp;QLock - type of lock to put on record NO-LOCK (default) or EXCLUSIVE-LOCK
            &amp;QWhere - MANDATORY - criteria to find record
            &amp;QFind - type of find to perform, unique, first, next or last
            &amp;Columns - List of columns
            </remarks>
        </member>
        <member name="T:Epicor.Mfg.BO.LegalNumGenOptsDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.LegalNumGenOptsDataSet.LegalNumGenOptsDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.LegalNumGenOptsDataSet.LegalNumGenOptsRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.LegalNumGenOptsDataSet.LegalNumGenOptsRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TFShipHeadListDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TFShipHeadListDataSet.TFShipHeadListDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TFShipHeadListDataSet.TFShipHeadListRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TFShipHeadListDataSet.TFShipHeadListRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.PackOutDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.PackOutDataSet.PackOutDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.PackOutDataSet.POSelectedSerialNumbersDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.PackOutDataSet.POSNFormatDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.PackOutDataSet.PackOutRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.PackOutDataSet.POSelectedSerialNumbersRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.PackOutDataSet.POSNFormatRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.PackOutDataSet.PackOutRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.PackOutDataSet.POSelectedSerialNumbersRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.PackOutDataSet.POSNFormatRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.SelectSerialNumbersParamsDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.SelectSerialNumbersParamsDataSet.SelectSerialNumbersParamsDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.SelectSerialNumbersParamsDataSet.SelectSerialNumbersParamsRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.SelectSerialNumbersParamsDataSet.SelectSerialNumbersParamsRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TranDirectOrderDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TranDirectOrderDataSet.TFOrdHedDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TranDirectOrderDataSet.TFOrdDtlDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TranDirectOrderDataSet.TFOrdHedRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TranDirectOrderDataSet.TFOrdDtlRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TranDirectOrderDataSet.TFOrdHedRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.TranDirectOrderDataSet.TFOrdDtlRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtTransOrderShipDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtTransOrderShipDataSet.TFShipHeadDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtTransOrderShipDataSet.TFShipHeadAttchDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtTransOrderShipDataSet.TFShipDtlDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtTransOrderShipDataSet.ShipCOODataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtTransOrderShipDataSet.TFShipUPSDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtTransOrderShipDataSet.SelectedSerialNumbersDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtTransOrderShipDataSet.SNFormatDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtTransOrderShipDataSet.TFShipHeadRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtTransOrderShipDataSet.TFShipHeadAttchRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtTransOrderShipDataSet.TFShipDtlRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtTransOrderShipDataSet.ShipCOORow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtTransOrderShipDataSet.TFShipUPSRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtTransOrderShipDataSet.SelectedSerialNumbersRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtTransOrderShipDataSet.SNFormatRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtTransOrderShipDataSet.TFShipHeadRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtTransOrderShipDataSet.TFShipHeadAttchRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtTransOrderShipDataSet.TFShipDtlRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtTransOrderShipDataSet.ShipCOORowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtTransOrderShipDataSet.TFShipUPSRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtTransOrderShipDataSet.SelectedSerialNumbersRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtTransOrderShipDataSet.SNFormatRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
    </members>
</doc>
