<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Epicor.Mfg.IF.ICustShip</name>
    </assembly>
    <members>
        <member name="T:Epicor.Mfg.BO.CustShipCustTrkDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipCustTrkDataSet.CustShipCustTrkDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipCustTrkDataSet.CustShipCustTrkRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipCustTrkDataSet.CustShipCustTrkRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipOrdTrkDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipOrdTrkDataSet.CustShipOrdTrkDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipOrdTrkDataSet.CustShipOrdTrkRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipOrdTrkDataSet.CustShipOrdTrkRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipPickedOrdersDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipPickedOrdersDataSet.PickedOrdersDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipPickedOrdersDataSet.MtlQueueDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipPickedOrdersDataSet.PickedOrdersRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipPickedOrdersDataSet.MtlQueueRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipPickedOrdersDataSet.PickedOrdersRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipPickedOrdersDataSet.MtlQueueRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipHeadDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipHeadAttchDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.CartonTrkDtlDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipDtlDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipDtlAttchDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipCOODataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipDtlPackagingDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipDtlTaxDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipMiscDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ReplicatedPacksDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipUPSDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.LegalNumberGenerateDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.SalesKitCompIssueDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.SelectedSerialNumbersDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipTaxSumDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.SNFormatDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipHeadRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipHeadAttchRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.CartonTrkDtlRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipDtlRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipDtlAttchRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipCOORow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipDtlPackagingRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipDtlTaxRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipMiscRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ReplicatedPacksRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipUPSRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.LegalNumberGenerateRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.SalesKitCompIssueRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.SelectedSerialNumbersRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipTaxSumRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.SNFormatRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipHeadRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipHeadAttchRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.CartonTrkDtlRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipDtlRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipDtlAttchRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipCOORowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipDtlPackagingRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipDtlTaxRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipMiscRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ReplicatedPacksRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipUPSRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.LegalNumberGenerateRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.SalesKitCompIssueRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.SelectedSerialNumbersRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.ShipTaxSumRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.CustShipDataSet.SNFormatRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.IF.ICustShip">
            <summary> Customer Shipment Business Object
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetNewShipHead(Epicor.Mfg.BO.CustShipDataSet)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetNewShipHeadAttch(Epicor.Mfg.BO.CustShipDataSet,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetNewCartonTrkDtl(Epicor.Mfg.BO.CustShipDataSet,System.String,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetNewShipDtl(Epicor.Mfg.BO.CustShipDataSet,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetNewShipDtlAttch(Epicor.Mfg.BO.CustShipDataSet,System.Int32,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetNewShipCOO(Epicor.Mfg.BO.CustShipDataSet,System.String,System.Int32,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetNewShipDtlTax(Epicor.Mfg.BO.CustShipDataSet,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetNewShipMisc(Epicor.Mfg.BO.CustShipDataSet,System.Int32,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetNewShipUPS(Epicor.Mfg.BO.CustShipDataSet,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.DeleteByID(System.Int32)">
            <summary>
            Deletes a row given its ID.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetByID(System.Int32)">
            <summary>
            Returns a DataSet given the primary key.
            </summary>
            <returns>The DataSet.</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetList(System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Returns a list of rows that satisfy the where clause.
            </summary>
            <param name="whereClause">An expression used to filter the rows. Can be left blank for all rows.</param>
            <param name="pageSize">The maximum number of rows to return. Leave as zero for no maximum.</param>
            <param name="absolutePage">Page of rows to return.</param>
            <param name="morePages">Whether there are more pages of rows available.</param>
            <returns>The list DataSet.</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetRows(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Returns a dataset containing all rows that satisfy the where clauses.
            </summary>
            <returns>The full DataSet.</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.Update(Epicor.Mfg.BO.CustShipDataSet)">
            <summary>
            Commits the DataSet changes to the data store.
            </summary>
            <param name="ds">The full DataSet.</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.UpdateExt(Epicor.Mfg.BO.UpdExtCustShipDataSet,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Apply input data to BO by calling GetByID/GetNew/Update methods.
            </summary>
            <returns>The dataset with list of errors occured during update process.</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetCodeDescList(System.String,System.String)">
            <summary>
            To return the CodeDescriptionList values of a given table.field.
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.NegativeInventoryTest(System.String,System.String,System.String,System.String,System.String,System.Decimal,System.Decimal,System.String@,System.String@)">
            <summary>
            To test on hand quantity of the bin - i.e. whether it will go negative.
            Call this method on change of Quantity.
            </summary>
            <param name="pcPartNum">Part Number</param>
            <param name="pcWhseCode">Warehouse Code</param>
            <param name="pcBinNum">Bin Number</param>
            <param name="pcLotNum">Lot Number</param>
            <param name="pcDimCode">From UNIT OF MEASURE (old Dimension Code)</param>
            <param name="pdDimConvFactor">Obsolete Dimension Conversion Factor</param>
            <param name="pdTranQty">Quantity (in stocking uom)</param>
            <param name="pcNeqQtyAction">Valid values are STOP, NONE or ASK User. If Ask User, the user can decide to go ahead with the update even if the qty is negative</param>
            <param name="pcMessage">Error message passed back from the business logic.</param>
            <returns>pcNeqQtyAction</returns>
            <returns>pcMessage</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.CreateCustomerCartons(System.Int32,System.String,System.Decimal,System.Decimal,System.Decimal,System.Boolean,System.Boolean,Epicor.Mfg.BO.CustShipDataSet)">
            <param name="ipNbrCartonsToCreate">Number of cartons or cases to create</param>
            <param name="ipPkgCode">Package Code to use when creating cartons</param>
            <param name="ipPkgLength">length to use when creating cartons</param>
            <param name="ipPkgWidth">Width to use when creating cartons</param>
            <param name="ipPkgHeight">Height to use when creating cartons</param>
            <param name="ipRecalcAmts">Logical indicating if the amounts are to be recalculated</param>
            <param name="ipZeroWeight">Logical indicating if the weights are recalculated</param>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.FindPartAndGetRowID(System.String,System.String@,System.String@,System.String@,System.String@)">
            <remarks>
            &amp;QTableName - MANDATORY - Name of table to find
            &amp;QLock - type of lock to put on record NO-LOCK (default) or EXCLUSIVE-LOCK
            &amp;QWhere - MANDATORY - criteria to find record
            &amp;QFind - type of find to perform, unique, first, next or last
            &amp;Columns - List of columns
            </remarks>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.FindFirstPart(System.String,System.Int32,System.String@,System.String@,System.String@,System.String@)">
            <remarks>
            &amp;QTableName - MANDATORY - Name of table to find
            &amp;QLock - type of lock to put on record NO-LOCK (default) or EXCLUSIVE-LOCK
            &amp;QWhere - MANDATORY - criteria to find record
            &amp;QFind - type of find to perform, unique, first, next or last
            &amp;Columns - List of columns
            </remarks>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetPartFromRowID(System.String,System.String,System.String@,System.String@)">
            <remarks>
            &amp;QTableName - MANDATORY - Name of table to find
            &amp;QLock - type of lock to put on record NO-LOCK (default) or EXCLUSIVE-LOCK
            &amp;QWhere - MANDATORY - criteria to find record
            &amp;QFind - type of find to perform, unique, first, next or last
            &amp;Columns - List of columns
            </remarks>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetCustNumFromRowID(System.String,System.String,System.String@,System.Int32@)">
            <remarks>
            &amp;QTableName - MANDATORY - Name of table to find
            &amp;QLock - type of lock to put on record NO-LOCK (default) or EXCLUSIVE-LOCK
            &amp;QWhere - MANDATORY - criteria to find record
            &amp;QFind - type of find to perform, unique, first, next or last
            &amp;Columns - List of columns
            </remarks>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetMfgPartFromRowID(System.String,System.String,System.String@,System.Int32@,System.String@)">
            <remarks>
            &amp;QTableName - MANDATORY - Name of table to find
            &amp;QLock - type of lock to put on record NO-LOCK (default) or EXCLUSIVE-LOCK
            &amp;QWhere - MANDATORY - criteria to find record
            &amp;QFind - type of find to perform, unique, first, next or last
            &amp;Columns - List of columns
            </remarks>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.CalcTaxes(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32,System.String,System.Int32,System.Boolean@,System.String@,System.Boolean@)">
             <summary>
            
             </summary>
             <param name="ipQuoteNum">Quote Number</param>
             <param name="ipOrderNum">Order Number.</param>
             <param name="ipInvoiceNum">Invoice Number.</param>
             <param name="ipAPInvKey">AP Invoice Number.</param>
             <param name="ipCashHeadNum">Cash Receipt Number.</param>
             <param name="ipPayHeadNum">Payment Number.</param>
             <param name="ipShipPackNum">Shipment Number.</param>
             <param name="ipEmpID">Employee ID.</param>
             <param name="ipEmpExpenseNum">Employee Expense Number.</param>
             <param name="opCommFailure"> Comm Failure </param>
             <param name="opMessage">Message</param>
             <param name="opTCStatus">TC Status</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetAvailTranDocTypes(System.String@)">
            <remarks>
            &amp;QTableName - MANDATORY - Name of table to find
            &amp;QLock - type of lock to put on record NO-LOCK (default) or EXCLUSIVE-LOCK
            &amp;QWhere - MANDATORY - criteria to find record
            &amp;QFind - type of find to perform, unique, first, next or last
            &amp;Columns - List of columns
            </remarks>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.AllowUndoExternalDN">
            <summary>
            This method exists soley for the purpose of allowing security for
            unchecking the external delivery note flag to be defined
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.AskForShipToChange(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Checks if user must be asked for take a different Shipping Information
            </summary>
            <param name="iPackNum">Pack Number</param>
            <param name="iOrderNum">Order Number</param>
            <param name="iOrderLine">Order Line Number</param>
            <param name="iOrderRelNum">Release Number</param>
            <param name="askUser">Tells if the user must be asked for changing the Shipping Information</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.AssignLegalNumber(System.Int32,Epicor.Mfg.BO.LegalNumGenOptsDataSet,System.String@)">
            <summary>
            Assigns a legal number to the customer shipment.
            </summary>
            <param name="ipPackNum">Packing Slip number</param>
            <param name="ds" type="Epicor.Mfg.BO.LegalNumGenOptsDataSet"></param>
            <param name="opLegalNumMsg">Legal number message</param>
            <returns type="Epicor.Mfg.BO.CustShipDataSet">The Customer Shipment data set </returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.BuildCompSerMatch(System.String,System.String,System.String)">
            <param name="ipPartNum">ipPartNum</param>
            <param name="ipRevNum">ipRevNum</param>
            <param name="ipSerialNumbers">ipSerialNumbers</param>
            <returns name="ds" type="Epicor.Mfg.BO.LLCompSerMatchDataSet">Customer Shipment data set </returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.BuildSerialMatchingParams(Epicor.Mfg.BO.SerialMatchingParamsDataSet,Epicor.Mfg.BO.CustShipDataSet,System.Int32)">
            <summary>
            This method fills the SerialMatchingParams Dataset with information
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.SerialMatchingParamsDataSet">Serial Matching data set </param>
            <param name="ds1" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
            <param name="packLine">Detail Line Number to update </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.BuildShipToCustomerList(System.Int32,System.String@)">
            <summary>
            If the Order has releases to multiple Customers, this will return the list of available
            Customer shiptos to select from
            </summary>
            <param name="orderNum">Order Number </param>
            <param name="shipToCustomerList">delimited list of available ShipTo's</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.BuildShipToList(System.Int32,System.Int32,System.String@)">
            <summary>
            If the Order has releases to multiple shipto's, this will return the list of available
            shiptos to select from
            </summary>
            <param name="orderNum">Order Number </param>
            <param name="iShipToCustNum">Ship To Customer ID</param>
            <param name="shipToList">delimited list of available ShipTo's</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.CalculateWeight(System.Int32,System.Decimal@)">
            <param name="cartonNumber">PackID </param>
            <param name="calculatedWeight">calculated weight</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.CancelVoid(System.Int32)">
            <summary>
            This method clears the void flag on the Pack Slip
            </summary>
            <param name="packNum">Packing Slip Number </param>
            <returns name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.CanStage(System.String)">
            <summary>
            This method check that a shipment can be staged
            </summary>
            <param name="ipShipHedRowID"> Unique Identifier for the Transfer Order Shipment </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.CartonValidateWeight(System.Decimal)">
            <param name="ipWeight"> weight to validate</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.ChangeShipCmpl(Epicor.Mfg.BO.CustShipDataSet,System.Int32,System.Boolean,System.String@)">
            <summary>
            This method performs validations when the ShipDtl.ShipCmpl field changes
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
            <param name="packLine">Detail Line Number to update </param>
            <param name="shipCmpl"> Proposed ShipCmpl change </param>
            <param name="questionString">If the ShipCmpl is being set for release 1 and OrderDtl.LockQty other releases will be closed
            ask if the user wants to continue </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.ChangeShipDtlMFCustID(System.String,Epicor.Mfg.BO.CustShipDataSet)">
            <summary>
            Method to call when changing the Mark For Customer ID on the ShipDtl record.
            Validates the Mark For Customer ID and ressets the ShipToNum to the Customer default.
            </summary>
            <param name="ipMFCustID">The proposed Mark For Customer ID</param>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">The Customer Shipment data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.ChangeShipDtlMFShipToNum(System.String,Epicor.Mfg.BO.CustShipDataSet)">
            <summary>
            Update ShipDtl information with values from the Mark For when the Mark For is changed.
            </summary>
            <param name="proposedMFShipToNum">The Proposed Mark For ShipToNum </param>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">The Customer Shipment data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.ChangeShipDtlUseOTMF(Epicor.Mfg.BO.CustShipDataSet)">
            <summary>
            Method to call when changing the UseOTMF field the ShipDtl record.
            Refreshes the address list and contact info
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">The Customer Shipment data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.ChangeShipHeadShipToCustID(System.String,Epicor.Mfg.BO.CustShipDataSet)">
            <summary>
            Executed when ShipToCustID has changed in the Ship Header
            </summary>
            <param name="iShipToCustID">Ship To Customer ID</param>
            <param name="ds">CustShip Data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.ChangeShipMiscPrcnt(Epicor.Mfg.BO.CustShipDataSet,System.Decimal)">
            <summary>
            This method populates the miscellaneous amount fields after
            a miscellaneous charge percentage has been changed
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
            <param name="newPrcnt">Proposed Miscellaneous Change Percentage</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.ChangeStatus(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            This method will be called to perform a change in the header status.
            </summary>
            <param name="ipShipHedRowID"> Unique Identifier for the Transfer Order Shipment </param>
            <param name="ipStatus"> Selected Status.
            Valid Options: Open, Close, Void, UnVoid, Freight, UnFreight, Stage </param>
            <param name="ipResetCODCharges">Indicates if the CODAmount is to be reset to zero</param>
            <param name="ipResetInsCharges">Indicates if the DeclaredAmt is to be reset to zero</param>
            <returns name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment Data Set</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.CheckCompliance(System.Int32,System.Boolean@,Epicor.Mfg.BO.CustShipDataSet)">
            <summary>
            Check for every line of the Pack if it requires if it is compliant.
            </summary>
            <param name="ipPackNum">Current PackNum.</param>
            <param name="opCompliant">Indicates if the current Pack is compliant.</param>
            <param name="ds">Customer Shipment dataset</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.CheckCOOPercents(System.Int32,System.Int32)">
            <summary>
            Checks to see if the Qty percent and value percent fields total 100 percent.
            </summary>
            <param name="iPackNum">The current PackNum </param>
            <param name="iPackLine">The current PackLine </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.CheckOrder(System.Int32,System.String@)">
            <summary>
            This method check releases related with this pack were refused to close because non shipped pack existing.
            </summary>
            <param name="packNum">The Pack Number to check out</param>
            <param name="msg">releases weren't closed message</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.CheckOrderComplete(Epicor.Mfg.BO.CustShipDataSet,System.Int32,System.String,System.String@)">
            <summary>
            This method is to be run before update Shipped flag (true) to check if order or line of the pack needs
            to be shipped complete, and ask the user if he wants to continue. If the user answers no, then the update method should not be called.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
            <param name="ipPackNum">Pack Num to validate </param>
            <param name="ipShipmentType">Type of shipment to validate </param>
            <param name="msg">If the Order or line need to be shipped complete, this asks if the user wants to continue</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.CheckPrePartInfo(System.String@,System.Int32,System.Int32,System.String@,System.Boolean@,System.String@,System.String@)">
            <summary>
            This method checks to see if there are any questions or issues with the part entered
            and returns a message, a part number and if any substitutes exist.
            </summary>
            <param name="partNum">The input-output part number to validate and it gets returned</param>
            <param name="orderNum">The Order Number being changed </param>
            <param name="orderLine">The Order Line being changed </param>
            <param name="vMsgText">The returned message for the inputted part</param>
            <param name="vSubAvail">Returned flag stating if substitutes exist for this part</param>
            <param name="vMsgType">Type of message returned.
            Values can be; "Question" (asking if they want to use the substitute part)
            "Warning" (Warns them that a part is onhold or runout).
            "Error" (Part in Inactive, or Onhold/Runout parts are not accepted in this case) .
            "Question" is asking if they want to use the substitute part. </param>
            <param name="origPartNum">Returned origninal PartNum</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.CheckReadyToInvoice(System.Boolean,System.String@,Epicor.Mfg.BO.CustShipDataSet)">
            <summary>
            This method should be run when the ReadyToInvoice flag has been unchecked. It will
            look to see if the record was sent to an External package and send back an error message
            for the user to review. Calling the update Method assumes the user answered yes to the question.
            </summary>
            <param name="readyToInvoice">Proposed value of the ReadyToInvoice field to validate </param>
            <param name="legalNumberMessage">Error warning about Legal Numbers </param>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.CheckShipDtl(Epicor.Mfg.BO.CustShipDataSet,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            This method is to be run before update to ask the user any question that need to be
            answered before the record(s) can be saved. If the user answers no to any one of
            the questions, then the update method should not be called.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
            <param name="releaseMessage">If the Order release is closed, this asks if the user wants to continue</param>
            <param name="completeMessage">If the order complete status has changed, this would alert the user to any problems (yes/no)</param>
            <param name="shippingMessage">Alerts to any potential shipping error </param>
            <param name="lotMessage">If the lot doesn't exist, ask the user if they'd like to create it </param>
            <param name="inventoryMessage">If the inventory will go negative, ask user if they want to continue </param>
            <param name="lockQtyMessage">If the OrderDtl.LockQty=true and release 1 is being set to ship complete, ask user if they want to continue </param>
            <param name="allocationMessage">If this transaction overrides a allocation, ask user if they want to continue </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.CheckShipHeadDispatchReason(System.String,Epicor.Mfg.BO.CustShipDataSet)">
            <summary>
            This method validates the ShipHead.DisptachReason field.
            This method should run before changing the ShipHead.DisptachReason field.
            </summary>
            <param name="ipDispatchReason">Dispatch Reason</param>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.CheckValidCartonWeight(System.Int32)">
            <param name="ipPackNum">Pack Num to validate weights</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.ClearConvertedManifestUOMFields(System.Int32)">
            <param name="ipPackNum">Pack Num to clear Manifest fields</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.ConvertToManifestUOM(System.Int32)">
            <param name="ipPackNum">Pack Num to populate Manifest fields</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.ConvertUOM(System.String,System.Decimal,System.String,System.String,System.Decimal@)">
            <summary>
            This method converts a qty from one UOM to another
            </summary>
            <param name="partNum">Part number</param>
            <param name="baseQty">Qty you wish to convert</param>
            <param name="baseUOM">UOM baseQty is specified in</param>
            <param name="convUOM">UOM to convert to</param>
            <param name="convQty">Qty converted to UOM specified in convUOM</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.CreateMassShipDtl(System.Int32,System.Int32,Epicor.Mfg.BO.CustShipDataSet)">
            <summary>
            This method copies the available Order Release lines to the ShipDtl datatable
            for update
            </summary>
            <param name="packNum">Pack Number to add new shipment lines to</param>
            <param name="orderNum">Order Number to create shipment lines from</param>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.DeletePhantomPacks(Epicor.Mfg.BO.CustShipDataSet)">
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.DeleteRangePhantomPacks(System.Int32,System.Int32,Epicor.Mfg.BO.CustShipDataSet)">
            <param name="ipFromCase">First case number to start deletes</param>
            <param name="ipToCase">Last case number to delete</param>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.ExpressShip">
            <summary>
            This method checks if the shipment is able to ship.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.getCartonPackaging(System.String,System.Decimal@,System.Decimal@,System.Decimal@)">
            <param name="ipPkgCode">package code</param>
            <param name="opPkgHeight">package height</param>
            <param name="opPkgWidth">package width</param>
            <param name="opPkgLength">package length</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetCustShipOrdTrk(System.Int32)">
             <summary>
             Get Customer Shipments for the Order.
             </summary>
            <param name="orderNum">Order Number</param>
            <returns name="ds" type="Epicor.Mfg.BO.CustShipOrdTrkDataSet"> Customer Shipment for Order Tracker data set </returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetHeadOrderInfo(System.Int32,System.String@,Epicor.Mfg.BO.CustShipDataSet)">
            <summary>
            This method displays the customer/address information when the OrderNum field
            in the header changes. Should only be called for new Customer Shipments, or
            Customer Shipments w/o lines
            </summary>
            <param name="orderNum"> Proposed change to OrderNum </param>
            <param name="creditMessage"> If customer is on credit hold an error message will be returned. </param>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetJobDtlInfo(Epicor.Mfg.BO.CustShipDataSet,System.Int32,System.String)">
            <summary>
            This method defaults the ShipDtl fields with the JobNum field changes
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
            <param name="packLine">Detail Line Number to update </param>
            <param name="jobNum">Proposed change to JobNum field </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetJobInfo(System.String,System.String@,Epicor.Mfg.BO.CustShipDataSet)">
            <summary>
            This method populates the Order and Address fields after the JobNum field has been populated
            </summary>
            <param name="jobNum">proposed JobNum change on ShipDtl</param>
            <param name="creditMessage"> If customer is on credit hold an error message will be returned. </param>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetJobSupOpSeq(System.String,System.String,System.String@)">
            <summary>
            This method Gets the Job Suboperations Sequence Numbers to retrive the Serial Numbers Selected for the PartNum
            </summary>
            <param name="jobNum">JobNum field </param>
            <param name="partNum">The part number to validate </param>
            <param name="mtlSeq">Material Sequences </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetLegalNumGenOpts(System.Int32,System.Boolean@)">
            <summary>
            Returns the legal number generation options.
            </summary>
            <param name="ipPackNum">Packing Slip number</param>
            <param name="opPromptForNum">Prompt for the number</param>
            <returns type="Epicor.Mfg.BO.LegalNumGenOptsDataSet">The Legal Number Generation Options dataset </returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetManifestInfo(System.Int32,System.Int32,Epicor.Mfg.BO.CustShipDataSet)">
            <param name="ipSalesOrder">Sales Order</param>
            <param name="ipPackNum">Pack Number</param>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetNewOrdrShipDtl(Epicor.Mfg.BO.CustShipDataSet,System.Int32,System.Int32)">
            <summary>
            Creates a new ShipDtl record, but defaulting the order number (if provided) as well
            as other data from the OrderHed record.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
            <param name="packNum">Pack ID</param>
            <param name="orderNum">Order number to default in the new record (optional)</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetNewOrdrShipUPS(Epicor.Mfg.BO.CustShipDataSet,System.Int32)">
            <summary>
            Creates a new ShipUS record,
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
            <param name="packNum">Pack ID</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetOrderInfo(System.Int32,System.String@,Epicor.Mfg.BO.CustShipDataSet)">
            <summary>
            This method displays the customer/address information when the OrderNum field changes
            Should only be called for new Customer Shipments, or Customer Shipments w/o lines
            </summary>
            <param name="orderNum"> Proposed change to OrderNum </param>
            <param name="creditMessage"> If customer is on credit hold an error message will be returned. </param>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetOrderLineInfo(Epicor.Mfg.BO.CustShipDataSet,System.Int32,System.Int32,System.String)">
            <summary>
            This method defaults the ShipDtl fields with the OrderLine fields
            change
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
            <param name="packLine">Detail Line Number to update </param>
            <param name="orderLine">Proposed Orderline change </param>
            <param name="subsPart">Proposed substitute PartNum </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetOrderRelInfo(Epicor.Mfg.BO.CustShipDataSet,System.Int32,System.Int32,System.Boolean)">
            <summary>
            This method defaults the ShipDtl fields with the OrderRel fields
            change
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
            <param name="packLine">Detail Line Number to update </param>
            <param name="orderRelNum">Proposed OrderRelease change </param>
            <param name="allowNewShipTo">Allow to take new ShipTo from release</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetPackaging(System.String,Epicor.Mfg.BO.CustShipDataSet)">
            <param name="ipPkgCode">package code</param>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetPackClass(System.String,Epicor.Mfg.BO.CustShipDataSet)">
            <param name="ipPkgClass">package class</param>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetPackOutPartXRef(Epicor.Mfg.BO.PackOutDataSet,System.Int32,System.String@,System.String,System.String,System.String@,System.String@,System.Boolean@)">
            <summary>
            This method defaults PackOut fields when the PartNum field changes
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.PackOutDataSet">Pack Out data set </param>
            <param name="packLine">Detail Line Number to update </param>
            <param name="partNum"> Proposed PartNumber change </param>
            <param name="sysRowID"> RowID of the selected record. Skips find part logic if this has a value. </param>
            <param name="rowType"> RowType of the selected record. Only used with sysRowID. </param>
            <param name="serialWarning">Warning message if the line contains serial numbers</param>
            <param name="questionString">If the part is being changed to something different than what was </param>
            <param name="multipleMatch"> Multiple matches were found by FindPart on the order, ask if the user wants to continue </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetPartInfo(Epicor.Mfg.BO.CustShipDataSet,System.Int32,System.String@,System.String,System.String,System.String@,System.String@,System.Boolean@)">
            <summary>
            This method defaults ShipDtl fields when the PartNum field changes
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
            <param name="packLine">Detail Line Number to update </param>
            <param name="partNum"> Proposed PartNumber change </param>
            <param name="sysRowID"> RowID of the selected record. Skips find part logic if this has a value. </param>
            <param name="rowType"> RowType of the selected record. Only used with sysRowID. </param>
            <param name="serialWarning">Warning message if the shipdtl line contains serial numbers</param>
            <param name="questionString">If the part is being changed to something different than what was
            <param name="multipleMatch"> Multiple matches were found by FindPart </param>
            on the order, ask if the user wants to continue </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetPayBTFlagDefaults(System.Int32,System.String,Epicor.Mfg.BO.CustShipDataSet)">
            <param name="ipOrderNum">First sales order on shipment</param>
            <param name="ipPayFlag"> Pay Flag to retrieve defaults</param>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">The customer shipment data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetPOPackaging(System.String,Epicor.Mfg.BO.PackOutDataSet)">
            <param name="ipPkgCode">package code</param>
            <param name="ds" type="Epicor.Mfg.BO.PackOutDataSet">Customer PackOut data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetPOPackClass(System.String,Epicor.Mfg.BO.PackOutDataSet)">
            <param name="ipPkgClass">package class</param>
            <param name="ds" type="Epicor.Mfg.BO.PackOutDataSet">Packout data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetQtyInfo(Epicor.Mfg.BO.CustShipDataSet,System.Int32,System.Decimal,System.Decimal)">
            <summary>
            This method defaults the ShipDtl Netweight and Quantity fields when the
            ShipDtl.DisplayInvQty or ShipDtl.OurJobShipQty fields change
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
            <param name="packLine">Detail Line Number to update </param>
            <param name="displayInvQty">Proposed change to Inventory Qty field </param>
            <param name="ourJobShipQty">Proposed change to OurJobShipQty field </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetRowsContactTracker(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Calls the normal GetRows method and then constructs a custom data set combining Head/Dtl fields for the contact tracker.
            </summary>
            <param name="whereClauseShipHead">Whereclause for ShipHead table.</param>
            <param name="whereClauseShipHeadAttch">Whereclause for ShipHeadAttch table.</param>
            <param name="whereClauseShipDtl">Whereclause for ShipDtl table.</param>
            <param name="whereClauseShipDtlAttch">Whereclause for ShipDtlAttch table.</param>
            <param name="whereClauseShipMisc">Whereclause for ShipMisc table.</param>
            <param name="whereClauseSelectedSerialNumbers">Whereclause for SelectedSerialNumbers table.</param>
            <param name="whereClauseSerialNumberSearch">Whereclause for SerialNumberSearches table.</param>
            <param name="whereClauseSNFormat">Whereclause for SNFormat table.</param>
            <param name="contactName">Contact to return data for.</param>
            <returns name="ds" type="Epicor.Mfg.BO.CustShipCustTrkDataSet">Epicor.Mfg.BO.CustShipCustTrkDataSet</returns>
            <param name="pageSize">Page size.</param>
            <param name="absolutePage">Absolute page.</param>
            <param name="morePages">More pages.</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetRowsCustomerTracker(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Calls the normal GetRows method and then constructs a custom data set combining Head/Dtl fields for the customer tracker.
            </summary>
            <param name="whereClauseShipHead">Whereclause for ShipHead table.</param>
            <param name="whereClauseShipHeadAttch">Whereclause for ShipHeadAttch table.</param>
            <param name="whereClauseShipDtl">Whereclause for ShipDtl table.</param>
            <param name="whereClauseShipDtlAttch">Whereclause for ShipDtlAttch table.</param>
            <param name="whereClauseShipMisc">Whereclause for ShipMisc table.</param>
            <param name="whereClauseSelectedSerialNumbers">Whereclause for SelectedSerialNumbers table.</param>
            <param name="whereClauseSerialNumberSearch">Whereclause for SerialNumberSearches table.</param>
            <param name="whereClauseSNFormat">Whereclause for SNFormat table.</param>
            <returns name="ds" type="Epicor.Mfg.BO.CustShipCustTrkDataSet">Epicor.Mfg.BO.CustShipCustTrkDataSet</returns>
            <param name="pageSize">Page size.</param>
            <param name="absolutePage">Absolute page.</param>
            <param name="morePages">More pages.</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetScale(System.String,System.String@)">
            <summary>Calls GetDefaultScale</summary>
            <param name="workstationID">Workstation ID</param>
            <param name="scaleID">Scale ID</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetSelectSerialNumbersParams(System.String,System.Decimal,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <param name="ipPartNum">ipPartNum</param>
            <param name="ipQuantity">ipQuantity</param>
            <param name="ipUOM">ipUOM</param>
            <param name="ipPackNum">ipPackNum</param>
            <param name="ipPackLine">ipPackLine</param>
            <param name="ipTranType">ipTranType</param>
            <param name="ipJobNum">ipJobNum</param>
            <param name="ipWhseCode">ipWhseCode</param>
            <param name="ipBinNum">ipBinNum</param>
            <param name="ipLotNum">ipLotNum</param>
            <param name="ipFromPO">ipFromPO</param>
            <param name="ipOrderNum">ipOrderNum</param>
            <param name="ipOrderLine">ipOrderLine</param>
            <param name="ipOrderRelNum">ipOrderRelNum</param>
            <returns type="Epicor.Mfg.BO.SelectSerialNumbersParamsDataSet"></returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetShipMiscDefaults(Epicor.Mfg.BO.CustShipDataSet,System.String)">
            <summary>
            This method populates the Description and miscellaneous amount fields after
            a miscellaneous charge code has been selected
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
            <param name="miscCode">Proposed Miscellaneous Code change </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetShipToAddr(Epicor.Mfg.BO.CustShipDataSet,System.String)">
            <summary>
            This method displays the shipto address information when the ShipToNum field changes
            Should only be called on new Shipments or if the Shipment has no lines and if
            the MultipleShippers flag is yes
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
            <param name="shipToNum">Proposed ShipTo Number change </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetTranDocTypeID(System.String,Epicor.Mfg.BO.CustShipDataSet)">
            <summary>
            Sets default values when the TranDocTypeID changes
            </summary>
            <param name="ipTranDocTypeID">TranDocTypeID supplied</param>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.GetWhseInfo(Epicor.Mfg.BO.CustShipDataSet,System.Int32,System.String,System.String)">
            <summary>
            This method defaults the ShipDtl Warehouse and bin fields when the warehousecode changes
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
            <param name="packLine">Detail Line Number to update </param>
            <param name="whseCode">Proposed WarehouseCode change </param>
            <param name="whseField">Warehouse field that is being changed </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.HHCreateMassShipDtl(System.Int32,System.Int32,Epicor.Mfg.BO.CustShipDataSet)">
            <summary>
            This method copies the available Order Release lines to the ShipDtl datatable
            for update
            </summary>
            <param name="packNum">Pack Number to add new shipment lines to</param>
            <param name="orderNum">Order Number to create shipment lines from</param>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.HHGetOrderInfo(System.Int32,System.String@,Epicor.Mfg.BO.CustShipDataSet)">
            <summary>
            This method sets the defaults quantities and Primary Bins fields as CreateMassShipment complements
            This method is used for HandHelds Version
            </summary>
            <param name="orderNum"> Proposed change to OrderNum </param>
            <param name="creditMessage"> If customer is on credit hold an error message will be returned. </param>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.HHSetDtlDefaultValues(Epicor.Mfg.BO.CustShipDataSet)">
            <summary>
            OBSOLETE - OBSOLETE - OBSOLETE - OBSOLETE - OBSOLETE - OBSOLETE - OBSOLETE - OBSOLETE - OBSOLETE
            Use MarkShipmentLines instead (the same logic that is used by the regular screen)
            OBSOLETE - OBSOLETE - OBSOLETE - OBSOLETE - OBSOLETE - OBSOLETE - OBSOLETE - OBSOLETE - OBSOLETE
            This method sets the defaults quantities and Primary Bins fields as CreateMassShipment complements
            This method is used for HandHelds Version
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.MarkShipmentLines(Epicor.Mfg.BO.CustShipDataSet)">
            <summary>
            This method sets all the temp-table records to be shipped (Ship all button selected)
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.PhantomStatusCheck(System.Int32)">
            <param name="ipPackNum">pack number to check status</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.PickedOrders(System.String,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String@)">
            <summary>
            OBSOLETE OBSOLETE OBSOLETE OBSOLETE OBSOLETE OBSOLETE OBSOLETE OBSOLETE
            - Call ProcessPickedOrder directly now -
            OBSOLETE OBSOLETE OBSOLETE OBSOLETE OBSOLETE OBSOLETE OBSOLETE OBSOLETE
            This method creates the packing slip for the selected picked order
            </summary>
            <param name="plant"> Picked Order Plant </param>
            <param name="orderNum">Picked Order Number</param>
            <param name="orderLine">Picked Order Line Number</param>
            <param name="orderRelNum">Picked Order Release Number</param>
            <param name="whseCode">Picked Order Warehouse</param>
            <param name="binNum">Picked Order Bin Number</param>
            <param name="jobNum">Picked Order Job Number</param>
            <param name="lotNum">Picked Order Lot Number</param>
            <param name="vMessage">List of lines with errors to be corrected </param>
            <returns name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.POChangeStage(Epicor.Mfg.BO.PackOutDataSet)">
            <summary>
            This method will be called to perform a change in the pack stage.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.PackOutDataSet">Customer PackOUt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.POChangeStatus(System.String,System.Boolean,System.Boolean,Epicor.Mfg.BO.PackOutDataSet)">
            <summary>
            This method will be called to perform a change in the header status from the pack Out
            screen.
            </summary>
            <param name="ipStatus"> Selected Status.
            Valid Options: Open, Close, Void, UnVoid, Freight, UnFreight, Stage </param>
            <param name="ipResetCODCharges">Indicates if the CODAmount is to be reset to zero</param>
            <param name="ipResetInsCharges">Indicates if the DeclaredAmt is to be reset to zero</param>
            <param name="ds" type="Epicor.Mfg.BO.PackOutDataSet">Customer PackOUt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.POFindBuffer(System.Int32@,System.String@,Epicor.Mfg.BO.PackOutDataSet)">
            <summary>
            This method returns a count order of lines that match the incomming scanned criteria.
            If there is no unique match, logical fields are updated to que the UI as to what need
            to be prompted in order to find a matching order dtl.
            </summary>
            <param name="found">Number of matches count</param>
            <param name="rowident">Rowident of unique match order dtl</param>
            <param name="ds" type="Epicor.Mfg.BO.PackOutDataSet">Customer PackOUt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.POFindBufWhseBinLot(System.Int32@,System.String@,Epicor.Mfg.BO.PackOutDataSet)">
            <summary>
            The purpose of this method is to return a unique PackOut.PackLine number if the
            warehouse or bin or lot changes. If it finds the match of an available shipdtl
            then it will return the rowident of the matching shipdtl. IF not the line number
            of the PackOut is incremented.
            </summary>
            <param name="found">Number of matches count</param>
            <param name="rowident">Rowident of unique match order dtl</param>
            <param name="ds" type="Epicor.Mfg.BO.PackOutDataSet">Customer PackOUt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.POGetDtlList(System.Int32,System.Int32,System.String,System.String@)">
            <summary>
            This method copies the available Order Release lines to the PackOut datatable
            for update
            </summary>
            <param name="ipPackNum">Pack Number</param>
            <param name="ipOrderNum">Order to get detail from </param>
            <param name="ipPackMode">Pack Mode</param>
            <param name="cWarning">ship to warning message</param>
            <returns name="ds" type="Epicor.Mfg.BO.PackOutDataSet">Customer PackOUt data set </returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.POGetNew(System.Int32,System.Int32,System.String@)">
            <summary>
            This method creates a new packout record for the customer shipment packout
            screen. can pass in a OrderNum or PackNum or Both.
            </summary>
            <param name="ipOrderNum">Order Number </param>
            <param name="ipPackNum">Pack Num</param>
            <param name="pcWarningMsg">If the order is on hold - warning msg </param>
            <returns name="ds" type="Epicor.Mfg.BO.PackOutDataSet">Customer PackOUt data set </returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.POGetShipTo(Epicor.Mfg.BO.PackOutDataSet)">
            <summary>
            This method creates a new packout record for the customer shipment packout
            screen
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.PackOutDataSet">Customer PackOut data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.PostUpdate(System.Int32,System.String@)">
            <summary>
            This method will return a message if a credit card shipment was processed
            during update or there are warning messages regarding outbound lower level serial tracking
            </summary>
            <param name="ipPackNum">Customer Shipment Number</param>
            <param name="opMessage">Text Message to display</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.POUpdate(System.Int32@,System.String,Epicor.Mfg.BO.PackOutDataSet)">
             <summary>
             This method creates a new packout record to create Shiphead and shipdtl records
            
             </summary>
             <param name="opPackNum">Pack Num </param>
             <param name="ipSourceRowID">RowIdent</param>
             <param name="ds" type="Epicor.Mfg.BO.PackOutDataSet">Customer Shipment data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.POUpdateAndDisplay(System.Int32@,System.String,System.Int32,Epicor.Mfg.BO.PackOutDataSet)">
             <summary>
             This method creates a new packout record to create Shiphead and shipdtl records
            
             </summary>
             <param name="opPackNum">Pack Num </param>
             <param name="ipSourceRowID">RowIdent</param>
             <param name="currLine">Pack Line</param>
             <param name="ds" type="Epicor.Mfg.BO.PackOutDataSet">Customer Shipment data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.POValidateOrder(System.Int32,System.Int32,System.Boolean@)">
            <summary>
            This method sets the service contract invoiced flag to match the shiphead flag
            </summary>
            <param name="ipCustNum">Customer Number </param>
            <param name="ipOrderNum">Order chose to add to carton </param>
            <param name="opVaildOrder">If we can add the order </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.POValidateOrderRel(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="ipPackNum">pack number</param>
            <param name="ipOrderNum">sales order number</param>
            <param name="ipOrderLine">sales order line number</param>
            <param name="ipOrderRelNum">sales order release number</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.POValidatePart(System.String,System.Int32,Epicor.Mfg.BO.PackOutDataSet,System.Boolean@,System.String@,System.Boolean@,System.String@)">
            <summary>
            Validates whether the provided part is valid or not for a given sales order.
            </summary>
            <param name="ipPartNum">Proposed part number.</param>
            <param name="ipOrderNum">Order number.</param>
            <param name="ds" type="Epicor.Mfg.BO.PackOutDataSet">Customer shipment packout dataset</param>
            <param name="opValidPart">True if the part is valid, false otherwise.</param>
            <param name="vMsgText"> Part edits message text</param>
            <param name="vSubAvail">substitution logical</param>
            <param name="vMsgType">indicates if warning, error, etc</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.PreCreateMassShipDtl(System.Int32,System.Int32,System.String@,Epicor.Mfg.BO.CustShipDataSet)">
            <summary>
            This method checks to see if it's okay to copy the available Order Release lines
            to the ShipDtl datatable for update in Mass Shipments
            </summary>
            <param name="packNum">Pack Number to add new shipment lines to</param>
            <param name="orderNum">Order Number to create shipment lines from</param>
            <param name="warnMsg">Returns a warning of lines that will not be created due to
            Serial Number tracking </param>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.PrePickedOrders(Epicor.Mfg.BO.CustShipPickedOrdersDataSet,System.String@)">
            <summary>
            This method is run right before PickedOrders. If not all of the line details have
            been picked to ship a question will be returned to the user. If yes, then
            call PickedOrders, if no allow the user to pick another order
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.CustShipPickedOrdersDataSet">PickedOrders dataset.</param>
            <param name="vMessage">Question needed to be asked of user</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.PrintSlip(System.Int32,System.Boolean)">
            <summary>
            This method prints the Customer Packing Slip
            </summary>
            <param name="packNum">The Packing Slip Number to print</param>
            <param name="printPreview">Flag if print should be previewed.</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.processMassShipKit">
            <remarks>
            &amp;QTableName - MANDATORY - Name of table to find
            &amp;QLock - type of lock to put on record NO-LOCK (default) or EXCLUSIVE-LOCK
            &amp;QWhere - MANDATORY - criteria to find record
            &amp;QFind - type of find to perform, unique, first, next or last
            &amp;Columns - List of columns
            </remarks>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.ProcessPickedOrder(System.Boolean,System.String@,System.Boolean,Epicor.Mfg.BO.CustShipPickedOrdersDataSet)">
            <summary>
            This method creates the packing slip for the selected picked order
            </summary>
            <param name="pConsolidate">Consolidates Orders in a single Carton.</param>
            <param name="vMessage">List of lines with errors to be corrected </param>
            <param name="skipDelete">Skip Delete? (for testing purposes)</param>
            <param name="ds" type="Epicor.Mfg.BO.CustShipPickedOrdersDataSet">PickedOrders dataset.</param>
            <returns name="ds1" type="Epicor.Mfg.BO.ShipHeadListDataSet">Customer Shipment List data set </returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.RebuildShipUPS(System.Int32,Epicor.Mfg.BO.CustShipDataSet)">
            <param name="ipPackNum">Packnum to update</param>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">The customer shipment data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.SetUPSQVEnable(System.Boolean,Epicor.Mfg.BO.CustShipDataSet)">
            <param name="ipQVEnable">logical indicating if the quantum view is to enabled/disabled</param>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">The customer shipment data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.SetUPSQVShipStatus(System.String,Epicor.Mfg.BO.CustShipDataSet)">
            <param name="ipShipStatus">Shipment status</param>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">The customer shipment data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.StageWarning(System.Int32,System.String@)">
            <param name="iPackNum">Serial number to validate.</param>
            <param name="iWarning">Serial Number Voided flag</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.UndoShipAll(Epicor.Mfg.BO.CustShipDataSet)">
            <summary>
            This method re-sets all the temp-table records shipped (Undo Ship all button selected)
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.UpdateManifestChargeAmts(System.String,System.Boolean,Epicor.Mfg.BO.CustShipDataSet)">
            <param name="ipAmountType">COD or DeclaredAmt</param>
            <param name="ipAction">Yes = recalculate No = reset to zero</param>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.UpdateMaster(Epicor.Mfg.BO.CustShipDataSet,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.Boolean@,System.Boolean@,System.String@,System.String@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet"></param>
            <param name="doValidateCreditHold">If true run validate credit hold logic</param>
            <param name="doCheckShipDtl">If true run checkShipDtl logic</param>
            <param name="doLotValidation">If true run lot validation logic</param>
            <param name="doCheckOrderComplete">If true run Check Order Complete logic</param>
            <param name="doPostUpdate">If true perform post update logic</param>
            <param name="doCheckCompliance">If true perform check compliance logic</param>
            <param name="ipShippedFlagChanged">If true then refresh data for ReadyToInvoice changed</param>
            <param name="ipPackNum">PackNum being updated</param>
            <param name="ipBTCustNum">Bill to customer number for credit hold validation</param>
            <param name="opReleaseMessage">If the Order release is closed, this asks if the user wants to continue</param>
            <param name="opCompleteMessage">If the order complete status has changed, this would alert the user to any problems (yes/no)</param>
            <param name="opShippingMessage">Alerts to any potential shipping error </param>
            <param name="opLotMessage">If the lot doesn't exist, ask the user if they'd like to create it </param>
            <param name="opInventoryMessage">If the inventory will go negative, ask user if they want to continue </param>
            <param name="opLockQtyMessage">If the OrderDtl.LockQty=true and release 1 is being set to ship complete, ask user if they want to continue </param>
            <param name="opAllocationMessage">If this transaction overrides a allocation, ask user if they want to continue </param>
            <param name="opPartListNeedsAttr">List of parts that require lot attributes entered</param>
            <param name="opLotListNeedsAttr">List of lots related to opPartListNeedsAttr that require lot attributes entered</param>
            <param name="shipCreditMsg">possible output message from validateCreditHoldCore</param>
            <param name="cError">Will be true if a hard error is encountered in validateCreditHoldCore</param>
            <param name="compError">Will be true if a hard error is encountered in checkOrderCompleteCore</param>
            <param name="msg">possible output message from checkOrderCompleteCore</param>
            <param name="opPostUpdMessage">possible output message from postUpdateCore or checkOrderCore</param>
            <param name="updateComplete">Indicates that the Update process did run</param>
            <param name="checkComplianceError">Indicates whether the check compliance logic encountered non-compliance lines</param>
            <param name="changeStatusError">Indicates whether the change status logic encountered errors</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.UpdatePackCODWithCarton(System.Int32,System.Int32,System.Decimal,System.Decimal,System.Boolean,Epicor.Mfg.BO.CustShipDataSet)">
            <param name="ipPackNum">Pack Number to process</param>
            <param name="ipCaseNum">Case Number to set value to zero</param>
            <param name="ipOldCOD">Previous COD</param>
            <param name="ipCOD">Current Case COD</param>
            <param name="ipFlag">Current COD flag value</param>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.UpdatePackDeclaredWithCarton(System.Int32,System.Int32,System.Decimal,System.Decimal,System.Boolean,Epicor.Mfg.BO.CustShipDataSet)">
            <param name="ipPackNum">Pack Number to process</param>
            <param name="ipCaseNum">Case Number to set value to zero </param>
            <param name="ipOldDeclared">Previous COD</param>
            <param name="ipDeclared">Current Case COD</param>
            <param name="ipDeclaredFlag">current setting of declared insurance</param>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.ValidateCreditHold(System.Int32,System.Int32,System.String@,System.Boolean@)">
            <param name="ipValPackNum">Packing Slip Number </param>
            <param name="ipValBTCustNum">Bill To Customer Number.</param>
            <param name="opCreditMessage">Credit Message.</param>
            <param name="opcError">Error flag.</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.ValidateCreditHoldSSC(System.Int32,System.String,System.String@,System.Boolean@)">
            <param name="ipPackNum">Packing Slip Number </param>
            <param name="ipShipmentType">Shipment Type </param>
            <param name="opCreditMessage">Credit Message.</param>
            <param name="opcError">Error flag.</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.ValidateCreditHoldPO(System.Int32,System.String@)">
            <param name="ipOrderNum">Packing Slip Number </param>
            <param name="opCreditMessage">Credit Message.</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.ValidateKitPart(System.Int32,Epicor.Mfg.BO.CustShipDataSet)">
            <summary>
            This method will validate the kit part when changing lines in the Sales Kit
            Component Issue grid
            </summary>
            <param name="packLine">Detail Line Number to update </param>
            <param name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.ValidateSN(System.String,System.String,System.String,System.Decimal,System.Decimal,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean@)">
            <param name="ipSerialNum">Serial number to validate.</param>
            <param name="ipPartNum">Part number</param>
            <param name="ipJobNum">Job number</param>
            <param name="ipOurJobshipQty">Job Ship Quantity</param>
            <param name="ipOurInvShipQty">Inventory Ship Quantity</param>
            <param name="ipOrderNum">Order number</param>
            <param name="ipOrderLine">Order Line number</param>
            <param name="ipOrderRelNum">OrderRelease number</param>
            <param name="ipShipFromWIP">Flag to indicate shipping from WIP</param>
            <param name="isVoided">Serial Number Voided flag</param>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.VoidLegalNumber(System.Int32,System.String)">
            <summary>
            Voids the legal number.
            </summary>
            <param name="ipPackNum">Packing Slip number</param>
            <param name="ipVoidedReason">Reason for the void</param>
            <returns type="Epicor.Mfg.BO.CustShipDataSet">The Customer Shipment data set </returns>
        </member>
        <member name="M:Epicor.Mfg.IF.ICustShip.VoidPackSlip(System.Int32)">
            <summary>
            This method sets the void flag on the Pack Slip
            </summary>
            <param name="packNum">Packing Slip Number </param>
            <returns name="ds" type="Epicor.Mfg.BO.CustShipDataSet">Customer Shipment data set </returns>
        </member>
        <member name="T:Epicor.Mfg.BO.LegalNumGenOptsDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.LegalNumGenOptsDataSet.LegalNumGenOptsDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.LegalNumGenOptsDataSet.LegalNumGenOptsRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.LegalNumGenOptsDataSet.LegalNumGenOptsRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ShipHeadListDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ShipHeadListDataSet.ShipHeadListDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ShipHeadListDataSet.ShipHeadListRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ShipHeadListDataSet.ShipHeadListRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.LLCompSerMatchDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.LLCompSerMatchDataSet.LLComSerMatchDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.LLCompSerMatchDataSet.LLComSerMatchRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.LLCompSerMatchDataSet.LLComSerMatchRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.PackOutDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.PackOutDataSet.PackOutDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.PackOutDataSet.POSelectedSerialNumbersDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.PackOutDataSet.POSNFormatDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.PackOutDataSet.PackOutRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.PackOutDataSet.POSelectedSerialNumbersRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.PackOutDataSet.POSNFormatRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.PackOutDataSet.PackOutRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.PackOutDataSet.POSelectedSerialNumbersRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.PackOutDataSet.POSNFormatRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.SelectSerialNumbersParamsDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.SelectSerialNumbersParamsDataSet.SelectSerialNumbersParamsDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.SelectSerialNumbersParamsDataSet.SelectSerialNumbersParamsRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.SelectSerialNumbersParamsDataSet.SelectSerialNumbersParamsRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.SerialMatchingParamsDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.SerialMatchingParamsDataSet.serialNumbersToMatchDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.SerialMatchingParamsDataSet.serialNumbersToMatchRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.SerialMatchingParamsDataSet.serialNumbersToMatchRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipHeadDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipHeadAttchDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.CartonTrkDtlDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipDtlDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipDtlAttchDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipCOODataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipDtlPackagingDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipDtlTaxDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipMiscDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ReplicatedPacksDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipUPSDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.LegalNumberGenerateDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.SalesKitCompIssueDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.SelectedSerialNumbersDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipTaxSumDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.SNFormatDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipHeadRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipHeadAttchRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.CartonTrkDtlRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipDtlRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipDtlAttchRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipCOORow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipDtlPackagingRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipDtlTaxRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipMiscRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ReplicatedPacksRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipUPSRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.LegalNumberGenerateRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.SalesKitCompIssueRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.SelectedSerialNumbersRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipTaxSumRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.SNFormatRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipHeadRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipHeadAttchRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.CartonTrkDtlRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipDtlRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipDtlAttchRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipCOORowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipDtlPackagingRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipDtlTaxRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipMiscRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ReplicatedPacksRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipUPSRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.LegalNumberGenerateRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.SalesKitCompIssueRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.SelectedSerialNumbersRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.ShipTaxSumRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtCustShipDataSet.SNFormatRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
    </members>
</doc>
