<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Epicor.Mfg.BO.PO</name>
    </assembly>
    <members>
        <member name="T:Epicor.Mfg.BO.PO">
            <summary>
            Client side business object for PO.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.Proxy.POImpl">
            <remarks>
            &amp;QTableName - MANDATORY - Name of table to find
            &amp;QLock - type of lock to put on record NO-LOCK (default) or EXCLUSIVE-LOCK
            &amp;QWhere - MANDATORY - criteria to find record
            &amp;QFind - type of find to perform, unique, first, next or last
            &amp;Columns - List of columns
            </remarks>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.#ctor(Epicor.Mfg.Core.BLConnectionPool)">
            <summary>
            Proxy constructor
            </summary>
            <param name="connPool">Connection pool</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.GetNewPOHeader(Epicor.Mfg.BO.PODataSet)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.GetNewPOHeaderAttch(Epicor.Mfg.BO.PODataSet,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.GetNewPODetail(Epicor.Mfg.BO.PODataSet,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.GetNewPODetailAttch(Epicor.Mfg.BO.PODataSet,System.Int32,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.GetNewPORel(Epicor.Mfg.BO.PODataSet,System.Int32,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.GetNewPORelTGLC(Epicor.Mfg.BO.PODataSet,System.Int32,System.Int32,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.GetNewPODetailInsp(Epicor.Mfg.BO.PODataSet,System.Int32,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.GetNewPOMisc(Epicor.Mfg.BO.PODataSet,System.Int32,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.GetNewPOHeadMisc(Epicor.Mfg.BO.PODataSet,System.Int32,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.DeleteByID(System.Int32)">
            <summary>
            Deletes a row given its ID.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.GetByID(System.Int32)">
            <summary>
            Returns a DataSet given the primary key.
            </summary>
            <returns>The DataSet.</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.GetList(System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Returns a list of rows that satisfy the where clause.
            </summary>
            <param name="whereClause">An expression used to filter the rows. Can be left blank for all rows.</param>
            <param name="pageSize">The maximum number of rows to return. Leave as zero for no maximum.</param>
            <param name="absolutePage">Page of rows to return.</param>
            <param name="morePages">Whether there are more pages of rows available.</param>
            <returns>The list DataSet.</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.GetRows(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Returns a dataset containing all rows that satisfy the where clauses.
            </summary>
            <returns>The full DataSet.</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.Update(Epicor.Mfg.BO.PODataSet)">
            <summary>
            Commits the DataSet changes to the data store.
            </summary>
            <param name="ds">The full DataSet.</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.UpdateExt(Epicor.Mfg.BO.UpdExtPODataSet,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Apply input data to BO by calling GetByID/GetNew/Update methods.
            </summary>
            <returns>The dataset with list of errors occured during update process.</returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.FindPartAndGetRowID(System.String,System.String@,System.String@,System.String@,System.String@)">
            <remarks>
            &amp;QTableName - MANDATORY - Name of table to find
            &amp;QLock - type of lock to put on record NO-LOCK (default) or EXCLUSIVE-LOCK
            &amp;QWhere - MANDATORY - criteria to find record
            &amp;QFind - type of find to perform, unique, first, next or last
            &amp;Columns - List of columns
            </remarks>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.FindFirstPart(System.String,System.Int32,System.String@,System.String@,System.String@,System.String@)">
            <remarks>
            &amp;QTableName - MANDATORY - Name of table to find
            &amp;QLock - type of lock to put on record NO-LOCK (default) or EXCLUSIVE-LOCK
            &amp;QWhere - MANDATORY - criteria to find record
            &amp;QFind - type of find to perform, unique, first, next or last
            &amp;Columns - List of columns
            </remarks>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.GetPartFromRowID(System.String,System.String,System.String@,System.String@)">
            <remarks>
            &amp;QTableName - MANDATORY - Name of table to find
            &amp;QLock - type of lock to put on record NO-LOCK (default) or EXCLUSIVE-LOCK
            &amp;QWhere - MANDATORY - criteria to find record
            &amp;QFind - type of find to perform, unique, first, next or last
            &amp;Columns - List of columns
            </remarks>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.GetCustNumFromRowID(System.String,System.String,System.String@,System.Int32@)">
            <remarks>
            &amp;QTableName - MANDATORY - Name of table to find
            &amp;QLock - type of lock to put on record NO-LOCK (default) or EXCLUSIVE-LOCK
            &amp;QWhere - MANDATORY - criteria to find record
            &amp;QFind - type of find to perform, unique, first, next or last
            &amp;Columns - List of columns
            </remarks>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.GetMfgPartFromRowID(System.String,System.String,System.String@,System.Int32@,System.String@)">
            <remarks>
            &amp;QTableName - MANDATORY - Name of table to find
            &amp;QLock - type of lock to put on record NO-LOCK (default) or EXCLUSIVE-LOCK
            &amp;QWhere - MANDATORY - criteria to find record
            &amp;QFind - type of find to perform, unique, first, next or last
            &amp;Columns - List of columns
            </remarks>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.GetCodeDescList(System.String,System.String)">
            <summary>
            To return the CodeDescriptionList values of a given table.field.
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeApproveSwitch(System.Boolean,System.String@,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Invoke this method when the Approve switch on the summary screen changes.
            </summary>
            <param name="approveValue">Was PO approved? Yes/No </param>
            <param name="violationMsg">The message contains error text</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeContractUOM(System.String,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Call this method when the PODetail.ContractQtyUOM changes.
            </summary>
            <param name="newUOM">New UOM</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeCountry(Epicor.Mfg.BO.PODataSet)">
            <summary>
            Changes country
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeCurrencyCode(System.String,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Run this method when the currency code changes on the poheader.
            This method will pull in the exchange rate.
            </summary>
            <param name="iCurrencyCode">Currency Code</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeCurrencySwitch(Epicor.Mfg.BO.PODataSet)">
            <summary>
            Run this method when the currency toggle changes on the POHeadeMisc.
            It will update the currency symbol.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeDetailAssemblySeq(System.Int32,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Invoke when assembly on the detail sheet changes. It will validate the release and
            zero out the JobSeq.
            </summary>
            <param name="newAsmSeq">New Assembly to be tested </param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeDetailCalcOurQty(System.Decimal,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Run this method when our quantity on the detail changes.
            </summary>
            <param name="newCalcOurQty">New Quantity</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeDetailCalcVendQty(System.Decimal,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Run this method when supplier quantity on the detail changes.
            </summary>
            <param name="newCalcVendQty">New Quantity</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeDetailIUM(System.String,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Call this method when the IUM changes on the PODetail.
            </summary>
            <param name="newIUM">New IUM</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeDetailJobNum(System.String,Epicor.Mfg.BO.PODataSet)">
            <summary>
            This method is used when the jobnumber on the detail screen changes .
            </summary>
            <param name="newJobNum">New Job Number</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeDetailJobSeq(System.Int32,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Invoke when Job/mtl sequence on the Detail sheet changes. I
            </summary>
            <param name="newJobSeqNum">New job/mtl seq to be tested </param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeDetailMangCust(System.String,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Run this method when MangCustID on the detail changes.
            </summary>
            <param name="newMangCust">New MangCustID</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeDetailMfgNum(System.Int32,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Call this method when the MfgNum changes on the PODetail.
            </summary>
            <param name="newMfgNum">New MfgNum</param>
            <param name="ds">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeDetailMfgPartNum(System.String,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Call this method when the MfgPartNum changes on the PODetail.
            </summary>
            <param name="newMfgPartNum">New MfgPartNum</param>
            <param name="ds">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeDetailOrderLine(System.Int32,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Call this method when the OrderLine changes on the PODetail.
            </summary>
            <param name="ipOrderLine">New OrderLine</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeDetailOrderNum(System.Int32,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Call this method when the OrderNum changes on the PODetail.
            </summary>
            <param name="ipOrderNum">New OrderNum</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeDetailPartClass(System.String,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Run this method when the partnumber on the detail screen changes .
            </summary>
            <param name="newClassID">New Class ID</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeDetailPartNum(System.String@,System.String,System.String,System.Boolean,System.Boolean@,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Run this method when the partnumber on the detail screen changes .
            </summary>
            <param name="newPartNum">New Part Number</param>
            <param name="sysRowID">Sys Row ID for match (conflict resolution only)</param>
            <param name="rowType">Row Type for match (conflict resolution only)</param>
            <param name="isSubstitute">True whether it is a Substitute Part</param>
            <param name="multipleMatch">Returns whether multiple matches were found.</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeDetailPUM(System.String,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Call this method when the PUM changes on the PODetail.
            </summary>
            <param name="newPUM">New PUM</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeDetailTranType(System.String,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Call this method when the TranType (LineType) changes on the PODetail.
            It will update the price on the release
            </summary>
            <param name="newTranType">New Transaction Type</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeExpAcct(System.String,System.Int32,Epicor.Mfg.BO.PODataSet)">
            <summary>
            This method sets the flag in PORelTGLC that indicates if the account
            has been overridden from the default.
            </summary>
            <param name="proposedAccountNum">The proposed account number </param>
            <param name="inTGLCTranNum">The TGLCTranNum of the PORelTGLC record to be checked </param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangePOHeadMiscCode(System.String,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Run this method when the misc code is changed on the POHeadMisc.
            It will recalaculate amounts.
            </summary>
            <param name="newMiscCode">The code of misc charge</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangePOHeadMiscPrcnt(Epicor.Mfg.BO.PODataSet)">
            <summary>
            Run this method when the percentage changes on the POHeadMisc.
            It will recalaculate doc and base amounts.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangePOMiscCode(System.String,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Run this method when the misc code is changed on the POMisc.
            It will recalaculate amounts.
            </summary>
            <param name="newMiscCode">The code of misc charge</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangePoMiscCurrSwitch(Epicor.Mfg.BO.PODataSet)">
            <summary>
            Run this method when the currency toggle changes on the POMisc.
            It will update the currency symbol and recalaculate doc and base amounts.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangePOMiscPrcnt(Epicor.Mfg.BO.PODataSet)">
            <summary>
            Run this method when the percentage changes on the POMisc.
            It will recalaculate doc and base amounts.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangePOType(System.String,Epicor.Mfg.BO.PODataSet)">
            <summary>
            This method should be invoked when the newPOType changes.
            </summary>
            <param name="newPOType">Proposed newPOType to be validated</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangePrcConNum(System.Int32,Epicor.Mfg.BO.PODataSet)">
            <summary>
            This method should be invoked when the PrcConNum changes. This method will validate
            the vendorCnt and pull in the new default information.
            </summary>
            <param name="prcConNum">Proposed PrcConNum to be validated</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangePurPoint(System.String,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Invoke this method to change the purchase point on the POHeader. This method
            will validate the PP and pull in default information.
            </summary>
            <param name="purPoint">New Purchase Point</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeQtyOption(System.String,Epicor.Mfg.BO.PODataSet)">
            <summary>
            This method is used when the QtyOption on the detail screen changes.
            </summary>
            <param name="ipQtyOption">New QtyOption</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeRelAssemblySeq(System.Int32,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Invoke when assembly on the release sheet changes. It will validate the release and
            zero out the JobSeq.
            </summary>
            <param name="newAsmSeq">New Assembly to be tested </param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeRelGlbCompany(System.String,Epicor.Mfg.BO.PODataSet)">
            <summary>
            This method should be called when the GlbCompany field on a po release changes.
            It will populate default values in PORel based on the new GlbCompany value.
            </summary>
            <param name="proposedGlbCompany">Proposed GlbCompany value </param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeRelGlbPlant(System.String,Epicor.Mfg.BO.PODataSet)">
            <summary>
            This method should be called when the GlbPlant field on a po release changes.
            It will populate default values in PORel based on the new GlbPlant value.
            </summary>
            <param name="proposedGlbPlant">Proposed GlbPlant value </param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeRelGlbWarehouse(System.String,Epicor.Mfg.BO.PODataSet)">
            <summary>
            This method should be called when the GlbWarehouse field on a po release changes.
            It will populate default values in PORel based on the new GlbWarehouse value.
            </summary>
            <param name="proposedGlbWarehouse">Proposed GlbCompany value </param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeRelIUM(System.String,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Call this method when the IUM changes on the PORel.
            </summary>
            <param name="newIUM">New IUM</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeRelJobNum(System.String,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Purpose: Invoke after the jobnumber has changed either on the release sheet .
            </summary>
            <param name="newJobNum">New Job Number</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeRelJobSeq(System.Int32,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Invoke when Job/mtl sequence on the release sheet changes. It will validate the release and
            zero out the JobSeq.
            </summary>
            <param name="newJobSeqNum">New job/mtl seq to be tested </param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeRelJobSeqWarning(System.String,System.String,System.Int32,System.Int32,System.String,System.String@)">
            <summary>
            Gets specified material or operation record and changes the warning message.
            </summary>
            <param name="ipTranType">Transaction Type </param>
            <param name="ipJobNum">Job Number </param>
            <param name="ipAssemblySeq">Assembly Sequence </param>
            <param name="ipNewJobSeq">Job Sequence </param>
            <param name="ipPODtlPartNum">Part Number </param>
            <param name="opWrnMsg">Warning Message to be displayed to the user </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeRelMangCust(System.String,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Run this method when MangCustID on the release changes.
            </summary>
            <param name="newMangCust">New MangCustID</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeRelOrderLine(System.Int32,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Call this method when the OrderLine changes on the PORel.
            </summary>
            <param name="ipOrderLine">New OrderLine</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeRelOrderNum(System.Int32,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Call this method when the OrderNum changes on the PORel.
            </summary>
            <param name="ipOrderNum">New OrderNum</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeRelOrderRelNum(System.Int32,Epicor.Mfg.BO.PODataSet,System.String@)">
            <summary>
            Call this method when the OrderRelNum changes on the PORel.
            </summary>
            <param name="ipOrderRelNum">New OrderRelNum</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
            <param name="opWrnMsg">Warning Message to be displayed to the user </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeRelOurQty(System.Decimal,Epicor.Mfg.BO.PODataSet,System.String@)">
            <summary>
            This should be run after OurQty (PORel.XRelQty) changed on the PO release.
            </summary>
            <param name="newOurQty">New quantity to be tested </param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
            <param name="opWarningMsg">BTO Warning message.</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeRelPUM(System.String,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Call this method when the PUM changes on the PORel.
            </summary>
            <param name="newPUM">New PUM</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeRelVendQty(System.Decimal,Epicor.Mfg.BO.PODataSet,System.String@)">
            <summary>
            This should be run after VendorQty (PORel.RelQty) changed on the PO release.
            </summary>
            <param name="newVendQty">New quantity to be tested </param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
            <param name="opWarningMsg">BTO Warning message.</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeTranType(System.String,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Call this method when the TranType (LineType) changes on the POREL.
            ExpAccount will change
            </summary>
            <param name="newTranType">New transaction type</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeUnitPrice(Epicor.Mfg.BO.PODataSet)">
            <summary>
            Calculates the UnitPrice or DocUnitPrice depending of the Currency Switch.
            </summary>
            <param name="ds">The Purchase Order data set</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ChangeVendor(System.String,Epicor.Mfg.BO.PODataSet)">
             <summary>
             This method should be invoked when the vendor ID changes. This method will validate
             the vendor and pull in the new default vendor information.
             1. Validate Vendor ID / Vendor Num
             2. check for inactive vendor
             3. check Vendor for Approved flag
             4. check item(s) for conficts with AprvVend
            
             </summary>
             <param name="vendID">Proposed vendor ID to be validated</param>
             <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.CheckComplianceFail(System.Int32,System.Boolean@)">
            <summary>
            Check for every release of the PO if it is compliant.
            </summary>
            <param name="poNum">Current PO Number.</param>
            <param name="compliant">Indicates if the current PO is compliant.</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.CheckLOC(System.String@,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Checks outstanding amounts to limit on APLOC (if applicable)
            This should be called before updating POHeader, PODetail, POMisc, or POHeadMisc
            If limit is exceeded a string is returned asking the user if they want to override.
            </summary>
            <param name="opMsg">Any returned error message.</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.CheckPONum(System.Int32,System.Boolean@,System.String@)">
            <summary>
            Method to call when entering proposed PO Number. This method will return
            two output variables. One is a logical field to indicate if the PO number
            entered is existing or not. The other variable is for the error message
            in case the proposed PO number is invalid.
            Removed Return from the end of this procedure
            </summary>
            <param name="proposedPONum">The proposed PO Number </param>
            <param name="opFoundPO">Indicates if the proposed PO number is already existing. </param>
            <param name="opMessage">Error message for the user to see. </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.CheckProjectID(System.String,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Validate Projec ID value
            </summary>
            <param name="ipProjectID">The Project ID value </param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.CheckRateGrpCode(System.String,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Update Quote Detail information when the Part Number is changed.
            </summary>
            <param name="ipRateGrpCode">Currency Rate Group Code </param>
            <param name="ds" type="Epicor.Mfg.BO.QuoteDataSet">Quote dataset</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.CloseOrder(System.Int32)">
            <summary>
            Filters up available open orders/lines
            </summary>
            <returns type="Epicor.Mfg.BO.PODataSet">The Purchase order data set </returns>
            <param name="poNum">The purchase order number</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.CloseOrderLine(System.Int32,System.Int32)">
            <summary>
            Filters up available open lines
            </summary>
            <param name="poNum">The purchase order number</param>
            <param name="poLine">The purchase order line</param>
            <returns type="Epicor.Mfg.BO.PODataSet">The Purchase order data set </returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.CloseRelease(System.Int32,System.Int32,System.Int32)">
            <summary>
            Run this method to close a release .
            </summary>
            <param name="poNum">The purchase order number</param>
            <param name="poLine">The purchase order line</param>
            <param name="poRelease">The purchase order release number</param>
            <returns type="Epicor.Mfg.BO.PODataSet">The Purchase order data set </returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.DuplicatePO(System.Int32,System.Boolean,System.Boolean,System.Nullable{System.DateTime},System.String@)">
            <summary>
            Duplicates PO
            </summary>
            <returns type="Epicor.Mfg.BO.PODataSet">The Purchase order data set </returns>
            <param name="poNum">The purchase order number</param>
            <param name="copyUnitCosts">Unit Costs</param>
            <param name="copyJobInfo">Job Info</param>
            <param name="newDueDate">new Due Date</param>
            <param name="cJobMTLIssuedComplete">To see if JobMTL is IssuedComplete</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.GetAPLOCDescription(System.String,Epicor.Mfg.BO.PODataSet)">
            <summary>
            This method should be invoked when it is required to set the APLOC Description changes.
            </summary>
            <param name="poAPLOCID">Proposed newPOType to be validated</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.GetCurrencyBase(System.String@)">
            <summary>
            This method returns the Base CurrencyCode
            </summary>
            <param name="opCurrencyBase">Base Currency</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.GetDefaultGLAccount(System.Int32,System.Int32,System.Int32,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Get Default GL Account.
            <param name="pPONum">PO Number</param>
            <param name="pPOLine">PO Line number</param>
            <param name="pPORelNum">PO Release number</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
            </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.GetDefaultGLAccountAllPOReleases(System.Int32,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Get Default GL Account for all PO Releases.
            <param name="pPONum">PO Number</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </param>
            </summary>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.GetGlbCompanyList(System.String@)">
            <summary>
            Returns a list of available companies to choose from for the
            Global Company field. Returns the list in code1`desc1~code2`desc2 format.
            </summary>
            <param name="glbCompanyList">The global company list </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.GetNewConsolidatedPO(Epicor.Mfg.BO.PODataSet)">
            <summary>
            Method to call when adding a Consolidated PO
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The PO data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.GetNewContractPO(Epicor.Mfg.BO.PODataSet)">
            <summary>
            Method to call when adding a Consolidated PO
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The PO data set </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.GetPartSubList(System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Public method to get the poapvmsg dataset.
            </summary>
            <returns type="Epicor.Mfg.BO.PartSubsDataSet">The PartSubs data set </returns>
            <param name="partNum">The part number</param>
            <param name="pageSize">pageSize</param>
            <param name="absolutePage">absolutePage</param>
            <param name="morePages">is there more Pages? Yes/No</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.GetPlantsForPart(System.String,System.String@)">
            <summary>
            Gets Plant for appropriate Part
            </summary>
            <param name="ipPartNum">Part Number</param>
            <param name="opPlantList">Delimited list of plants for part</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.GetPOReceipts(System.Int32)">
            <summary>
            Gets RcvDtl's and DropShipDtl's for a given PONum.
            </summary>
            <returns type="Epicor.Mfg.BO.POReceiptsDataSet">Epicor.Mfg.BO.POReceiptsDataSet.</returns>
            <param name="ipPONum">PONum.</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.PartStatusValidationMessages(System.String@,System.String@,System.Boolean@,System.String@)">
            <summary>
            The method is to be run on leave of the PartNum, Revision fields before the
            GetPartInfo or Update methods are run. This returns all the questions that
            need to be asked before a part can be changed.
            </summary>
            <param name="valpartnum">The new PartNum if a substitute part is found, partNum will be the substitute part </param>
            <param name="questionString">Asks if the user wants to use a substitute part </param>
            <param name="substitutePartAvail">Indicates other substitute parts besides the default exist</param>
            <param name="msgType">Type of message returned. if avail porel then message porel.poline porel.trantype.
            Values can be; "Question" (asking if they want to use the substitute part)
            "Warning" (Warns them that a part is onhold or runout).
            "Error" (Part in Inactive, or Onhold/Runout parts are not accepted in this case) .
            "Question" is asking if they want to use the substitute part. </param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ReopenOrder(System.Int32)">
            <summary>
            Reopens order
            </summary>
            <param name="poNum">The Purchase ordre number</param>
            <returns type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ReopenOrderLine(System.Int32,System.Int32)">
            <summary>
            Reopens order line
            </summary>
            <param name="poNum">The Purchase ordre number</param>
            <param name="poLine">The Purchase ordre line</param>
            <returns type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ReOpenRelease(System.Int32,System.Int32,System.Int32)">
            <summary>
            Run this method to reopen a release.
            </summary>
            <param name="poNum">The Purchase ordre number</param>
            <param name="poLine">The Purchase order line</param>
            <param name="poRelease">The Purchase ordre release</param>
            <returns type="Epicor.Mfg.BO.PODataSet">The Purchase Order data set </returns>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.ValidateInspection(System.String,System.String,Epicor.Mfg.BO.PODataSet)">
            <summary>
            Method to validate the Inspection control fields. (EQM)
            </summary>
            <param name="ipProposedInspPlan">The new proposed InspPlanPartNum value</param>
            <param name="ipProposedSpecId">The new proposed SpecID value</param>
            <param name="ds" type="Epicor.Mfg.BO.PODataSet">The PO entry Dataset.</param>
        </member>
        <member name="M:Epicor.Mfg.Proxy.POImpl.CalcAutoPORelTGLC(System.String)">
            <remarks>
            &amp;QTableName - MANDATORY - Name of table to find
            &amp;QLock - type of lock to put on record NO-LOCK (default) or EXCLUSIVE-LOCK
            &amp;QWhere - MANDATORY - criteria to find record
            &amp;QFind - type of find to perform, unique, first, next or last
            &amp;Columns - List of columns
            </remarks>
        </member>
        <member name="P:Epicor.Mfg.Proxy.POImpl.CallContext">
            <summary>
            Call context dataset
            </summary>
        </member>
        <member name="M:Epicor.Mfg.BO.PO.#ctor(Epicor.Mfg.Core.BLConnectionPool)">
            <summary>
            Constructor
            </summary>
            <param name="connPool">Connection pool</param>
        </member>
    </members>
</doc>
