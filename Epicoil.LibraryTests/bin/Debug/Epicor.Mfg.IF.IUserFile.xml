<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Epicor.Mfg.IF.IUserFile</name>
    </assembly>
    <members>
        <member name="T:Epicor.Mfg.BO.UserFileDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UserFileDataSet.UserFileDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UserFileDataSet.UserCompDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UserFileDataSet.UserCompExtDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UserFileDataSet.UserFileRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UserFileDataSet.UserCompRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UserFileDataSet.UserCompExtRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UserFileDataSet.UserFileRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UserFileDataSet.UserCompRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UserFileDataSet.UserCompExtRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.IF.IUserFile">
            <summary>
            User File Definition
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.IUserFile.GetNewUserFile(Epicor.Mfg.BO.UserFileDataSet)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.IUserFile.GetNewUserComp(Epicor.Mfg.BO.UserFileDataSet,System.String)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.IUserFile.GetNewUserCompExt(Epicor.Mfg.BO.UserFileDataSet,System.String,System.String)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.IUserFile.DeleteByID(System.String)">
            <summary>
            Deletes a row given its ID.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.IUserFile.GetByID(System.String)">
            <summary>
            Returns a DataSet given the primary key.
            </summary>
            <returns>The DataSet.</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.IUserFile.GetList(System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Returns a list of rows that satisfy the where clause.
            </summary>
            <param name="whereClause">An expression used to filter the rows. Can be left blank for all rows.</param>
            <param name="pageSize">The maximum number of rows to return. Leave as zero for no maximum.</param>
            <param name="absolutePage">Page of rows to return.</param>
            <param name="morePages">Whether there are more pages of rows available.</param>
            <returns>The list DataSet.</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.IUserFile.GetRows(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Returns a dataset containing all rows that satisfy the where clauses.
            </summary>
            <returns>The full DataSet.</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.IUserFile.Update(Epicor.Mfg.BO.UserFileDataSet)">
            <summary>
            Commits the DataSet changes to the data store.
            </summary>
            <param name="ds">The full DataSet.</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IUserFile.UpdateExt(Epicor.Mfg.BO.UpdExtUserFileDataSet,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Apply input data to BO by calling GetByID/GetNew/Update methods.
            </summary>
            <returns>The dataset with list of errors occured during update process.</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.IUserFile.AddUserCompany(System.String,Epicor.Mfg.BO.UserFileDataSet)">
            <summary>
            This method will create a new row in the UserComp datatable related to the
            given UserID.
            Use this method instead of GetNewUserComp(), which is generated by the BL
            framework--so it can't be deleted--but is unusable due to its lack of
            input parameters. Without an input parameter for the UserID, a new row
            has a blank UserID and blank Company, which violates the dataset contraints.
            </summary>
            <param name="uid">The UserId for which a Company will be added.</param>
            <param name="ds">The User data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IUserFile.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Implements change password logic
            </summary>
            <param name="uid">User ID</param>
            <param name="currentPassword">current Password</param>
            <param name="newPassword">new Password</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IUserFile.CheckForCompany(System.String)">
            <summary>
            This method is to be run when the user leaves the UserFile record. It will
            check to see that at least one UserComp record exists. If not the user must
            add one before continuing on.
            </summary>
            <param name="uid">User ID</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IUserFile.GetDefaults(System.String,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Get Defaults values by User ID
            </summary>
            <param name="uid">User ID</param>
            <param name="companyID">company ID</param>
            <param name="companyName">company Name</param>
            <param name="plantID">plant ID</param>
            <param name="plantName">plant Name</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IUserFile.GetExtCompanyList(System.String,System.String@)">
            <summary>
            This method is to be run when the user leaves the UserFile record. It will
            check to see that at least one UserComp record exists. If not the user must
            add one before continuing on.
            </summary>
            <param name="inAuthCompany">Authorized Company</param>
            <param name="extCompList">List of CompanyID and ExtCompID</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IUserFile.SaveSettings(System.String,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Save user settings
            Unlike the Update method, there is no optimistic locking performed.
            So the settings are saved in a last in wins basis
            </summary>
            <param name="uid"></param>
            <param name="saveSettings"></param>
            <param name="curComp"></param>
            <param name="viewFavoriteBar"></param>
            <param name="viewFullTree"></param>
            <param name="viewStatusBar"></param>
            <param name="viewStatusPanelCompany"></param>
            <param name="viewStatusPanelLanguage"></param>
            <param name="viewStatusPanelPlant"></param>
            <param name="viewStatusPanelServer"></param>
            <param name="viewStatusPanelUserID"></param>
            <param name="viewStatusPanelWorkstationID"></param>
            <param name="winX"></param>
            <param name="winY"></param>
            <param name="winWidth"></param>
            <param name="winHeight"></param>
            <param name="listViewMode"></param>
            <param name="curMenuID"></param>
            <param name="plantID"></param>
            <param name="workstationID"></param>
            <param name="curFolderSeq"></param>
            <param name="maxGroupsFavorites"></param>
            <param name="maxGroupsSystemMenu"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.IUserFile.CheckPayrollRights">
            <summary>
            Check payroll rights for current user and company
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.IUserFile.IsPasswordExpired(System.String,System.Int32@)">
            <summary>
            Check if password is expired
            </summary>
            <param name="uid">User ID</param>
            <param name="graceCount">grace Count</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IUserFile.ValidatePassword(System.String,System.String)">
            <summary>
            Check if password is valid
            </summary>
            <param name="uid">User ID</param>
            <param name="password">Password</param>
        </member>
        <member name="T:Epicor.Mfg.BO.UserFileListDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UserFileListDataSet.UserFileListDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UserFileListDataSet.UserFileListRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UserFileListDataSet.UserFileListRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtUserFileDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtUserFileDataSet.UserFileDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtUserFileDataSet.UserCompDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtUserFileDataSet.UserCompExtDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtUserFileDataSet.UserFileRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtUserFileDataSet.UserCompRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtUserFileDataSet.UserCompExtRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtUserFileDataSet.UserFileRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtUserFileDataSet.UserCompRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtUserFileDataSet.UserCompExtRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
    </members>
</doc>
