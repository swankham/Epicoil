<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Epicor.Mfg.IF.IReceipt</name>
    </assembly>
    <members>
        <member name="T:Epicor.Mfg.BO.ContainerTrackingDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ContainerTrackingDataSet.ContainerHeaderDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ContainerTrackingDataSet.ContainerHeaderAttchDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ContainerTrackingDataSet.ContainerDetailDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ContainerTrackingDataSet.ContainerDetailAttchDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ContainerTrackingDataSet.ContainerDutyDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ContainerTrackingDataSet.ContainerMiscDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ContainerTrackingDataSet.ContainerHeaderRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ContainerTrackingDataSet.ContainerHeaderAttchRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ContainerTrackingDataSet.ContainerDetailRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ContainerTrackingDataSet.ContainerDetailAttchRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ContainerTrackingDataSet.ContainerDutyRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ContainerTrackingDataSet.ContainerMiscRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ContainerTrackingDataSet.ContainerHeaderRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ContainerTrackingDataSet.ContainerHeaderAttchRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ContainerTrackingDataSet.ContainerDetailRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ContainerTrackingDataSet.ContainerDetailAttchRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ContainerTrackingDataSet.ContainerDutyRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ContainerTrackingDataSet.ContainerMiscRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.RcvHeadDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.RcvHeadAttchDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.RcvDtlDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.RcvDtlAttchDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.RcvDutyDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.RcvMiscDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.LegalNumGenOptsDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.PendingRcvDtlDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.SelectedSerialNumbersDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.SNFormatDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.SupplierXRefDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.RcvHeadRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.RcvHeadAttchRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.RcvDtlRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.RcvDtlAttchRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.RcvDutyRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.RcvMiscRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.LegalNumGenOptsRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.PendingRcvDtlRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.SelectedSerialNumbersRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.SNFormatRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.SupplierXRefRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.RcvHeadRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.RcvHeadAttchRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.RcvDtlRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.RcvDtlAttchRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.RcvDutyRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.RcvMiscRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.LegalNumGenOptsRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.PendingRcvDtlRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.SelectedSerialNumbersRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.SNFormatRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.ReceiptDataSet.SupplierXRefRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.IF.IReceipt">
            <summary>
            Receipt Entry
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetNewRcvHead(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetNewRcvHeadAttch(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String,System.String)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetNewRcvDtl(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String,System.String)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetNewRcvDtlAttch(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetNewRcvDuty(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetNewRcvMisc(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String,System.String)">
            <summary>
            Inserts a new row in the DataSet with defaults populated.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.DeleteByID(System.Int32,System.String,System.String)">
            <summary>
            Deletes a row given its ID.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetByID(System.Int32,System.String,System.String)">
            <summary>
            Returns a DataSet given the primary key.
            </summary>
            <returns>The DataSet.</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetList(System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Returns a list of rows that satisfy the where clause.
            </summary>
            <param name="whereClause">An expression used to filter the rows. Can be left blank for all rows.</param>
            <param name="pageSize">The maximum number of rows to return. Leave as zero for no maximum.</param>
            <param name="absolutePage">Page of rows to return.</param>
            <param name="morePages">Whether there are more pages of rows available.</param>
            <returns>The list DataSet.</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetRows(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Returns a dataset containing all rows that satisfy the where clauses.
            </summary>
            <returns>The full DataSet.</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.Update(Epicor.Mfg.BO.ReceiptDataSet)">
            <summary>
            Commits the DataSet changes to the data store.
            </summary>
            <param name="ds">The full DataSet.</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.UpdateExt(Epicor.Mfg.BO.UpdExtReceiptDataSet,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Apply input data to BO by calling GetByID/GetNew/Update methods.
            </summary>
            <returns>The dataset with list of errors occured during update process.</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetCodeDescList(System.String,System.String)">
            <summary>
            To return the CodeDescriptionList values of a given table.field.
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetAvailTranDocTypes(System.String@)">
            <remarks>
            &amp;QTableName - MANDATORY - Name of table to find
            &amp;QLock - type of lock to put on record NO-LOCK (default) or EXCLUSIVE-LOCK
            &amp;QWhere - MANDATORY - criteria to find record
            &amp;QFind - type of find to perform, unique, first, next or last
            &amp;Columns - List of columns
            </remarks>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.AutoSetToLocation(Epicor.Mfg.BO.ReceiptDataSet)">
            <summary>
            This procedure sets RcvDtl.SetToLocation to yes in given data set.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.AutoSetToLocationToDflt(Epicor.Mfg.BO.ReceiptDataSet)">
            <summary>
            This procedure sets RcvDtl.SetToLocation to yes in given data set.
            To be used to set the part location or the default receiving whse
            from plant/compay depending on the preset SetToLocation flag
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.CheckCompliance(System.Int32,System.String,System.String,System.Boolean@,Epicor.Mfg.BO.ReceiptDataSet)">
            <summary>
            .
            </summary>
            <param name="vendorNum">Vendor Number</param>
            <param name="purPoint">Purchase Point Number</param>
            <param name="packSlip">Receipt Packing Slip Number</param>
            <param name="compliant">Indicates if the current Pack is compliant.</param>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.CheckContainersBeforeUpdate(Epicor.Mfg.BO.ReceiptDataSet,System.String@,System.String@,System.String@,System.String@,System.String@)">
             <summary>
             This method is to be called right before the update of a ContainerReceipt. If
             there is a discrepancy between the quantities, serial numbers the
             user is asked if they are sure they want to continue.
            
             qQuestion and sQuestion are provided so the UI can format the message box
             and make it easier for the end user to read the text.
             </summary>
             <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
             <param name="qMessageStr">Quantity Question to ask user before update. If no, update method is not run</param>
             <param name="qQuestion">Question asked when there is a quantity discrepancy.</param>
             <param name="sMessageStr">Serial Number Question to ask users before update. If no, update method is not run</param>
             <param name="sQuestion">Question asked when there is a serial number discrepancy.</param>
             <param name="lMessageStr">Lot Number error message</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.CheckDtlBeforeUpdate(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String,System.Int32,System.String,System.String@,System.String@,System.String@)">
            <summary>
            This method is to be called right before the update method is called. If there
            is a discrepancy between the vendorqty and ourqty, the user will be asked if they're
            sure they want to continue.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packLine">Receipt Line to check</param>
            <param name="packSlip">Receipt Packing Number</param>
            <param name="qMessageStr">Quantity Question to ask user before update. If no, update method is not run</param>
            <param name="sMessageStr">Serial Number Question to ask users before update. If no, update method is not run</param>
            <param name="lcMessageStr">Landed Cost Question to ask users before update. If no, update method is not run</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.CheckDtlCompliance(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String,System.Int32,System.String,System.String@)">
            <summary>
            .
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packLine">Receipt Line to check</param>
            <param name="packSlip">Receipt Packing Number</param>
            <param name="qMessageStr">Quantity Question to ask user before update. If no, update method is not run</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.CheckDtlJobStatus(System.Int32,System.Int32,System.Int32,System.String,System.String@,System.String@,System.String@)">
            <summary>
            This method is to be run before the GetDtlPOLine and GetDtlPORel and GetDtlJobInfo methods
            are called If the Job/PO to a closed or complete job, a question or a warning will be returned
            </summary>
            <param name="poNum">Purchase Order Number for Receipt</param>
            <param name="poLine">Purchase Order Line</param>
            <param name="poRelNum">Purchase Order Release</param>
            <param name="jobNum">Job Number</param>
            <param name="poQuestion">Question if the PORelease is closed.
            If the user answers no then the next 2 messages never need to be displayed</param>
            <param name="questionMsg">Question to continue if job is closed</param>
            <param name="warnMsg">Warning if job is complete</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.CheckDtlLotInfo(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String,System.String,System.Int32,System.String,System.String@,System.String@)">
            <summary>
            This method returns an error or question if the LotNum field does not exist
            depending upon the security of the user
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packSlip">Receipt Packing Number</param>
            <param name="packLine">Receipt Line to check</param>
            <param name="lotNum">New Lot Number to validate</param>
            <param name="questionMsg">Asks if user want to create new lot</param>
            <param name="errorMsg">Tells user if they can't create a new lot</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.CheckDtlSeqChange(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String,System.String,System.Int32,System.Int32,System.String@)">
            <summary>
            This method is run when the JobSeq field is changed along with GetSeqInfo.
            If the JobMtl is marked as IssuedComplete, the user is asked whether they are sure
            they want to change the sequence number. Only move forward if the answer is yes.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packSlip">Receipt Packing Number</param>
            <param name="packLine">Receipt Line to check</param>
            <param name="jobSeq">The proposed JobSeq value</param>
            <param name="vMessage">This is the question that the user needs to answer</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.CheckDtlSSN(System.Int32,System.String,System.String,System.Int32,System.String,System.String,System.String@,System.String@)">
            <summary>
            This method tests to see if Serial Numbers exist that may be deleted if the
            ReceivedTo field or PartNum changes. The update method assumes the user answered yes
            and will delete the Serial Numbers.
            </summary>
            <param name="vendorNum">Vendor Number</param>
            <param name="purPoint">Vendor Purchase Point ID</param>
            <param name="packSlip">Packing Slip Number</param>
            <param name="packLine">Packing Slip Line</param>
            <param name="receivedTo">Receipt ReceivedTo field (proposed or current)</param>
            <param name="partNum">Proposed Receipt Part Number (proposed or current)</param>
            <param name="vMessage">Question if ReceivedTo has changed and Serial Numbers will be deleted</param>
            <param name="vWMessage">Warning if Part Number has changed</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.CheckForDefaultRcvInfo">
            <summary>
            This method is to be run right after the form opens to determine whether the
            default receiving warehouse and bin have been populated for the cur-plant.
            If not, the form will close.
            </summary>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.CheckHdrBeforeUpdate(System.String@,System.String@,System.String@,Epicor.Mfg.BO.ReceiptDataSet)">
            <summary>
            This method will return three warning messages if the Receipt Header changes
            any of the UpliftPercent, ReceiptDate and ArrivedDate. The user will be asked
            if the changes should be applied to all the Receipt Details as well. This method
            should be called before the Update method is called.
            </summary>
            <param name="opUpliftWarnMsg">The warning message about the change in uplift percent.</param>
            <param name="opReceiptWarnMsg">The warning message about the change in receipt date.</param>
            <param name="opArriveWarnMsg">The warning message about the change in arrival date.</param>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.CheckIssuedComplete(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String,System.String,System.Int32,System.Boolean,System.String@)">
            <summary>
            This method is to be run after the IssuedComplete flag is changed. Any questions
            returned require a yes/no response from the user.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packSlip">Receipt Packing Number</param>
            <param name="packLine">Receipt Line to check</param>
            <param name="issuedComplete"></param>
            <param name="vMessage">Question asking if the user is sure they want to set/clear the flag</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.CheckLCAmtBeforeUpdate(System.Int32,System.String,System.String,System.Int32,System.String@,Epicor.Mfg.BO.ReceiptDataSet)">
            <summary>
            This method will return a warning message if any of the partial receipt lines
            needs to recalculate container landed costs. The user will be asked if he wants to
            continue to receive the line(s) or undo update to review the container landed
            costs first.
            </summary>
            <param name="ipVendorNum">Receipt Vendor Number</param>
            <param name="ipPurPoint">Receipt Purchase Point</param>
            <param name="ipPackSlip">Receipt Packing Number</param>
            <param name="ipPackLine">Receipt Line to check</param>
            <param name="opMessage">Question asking if the user will continue with update or review landed costs first</param>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.CheckOnLeaveHead(System.Int32,System.String,System.String)">
            <summary>
            This method needs to be run when leaving the RcvHead record either by going to another
            RcvHead record or leaving the screen. It checks that the landed cost has been evenly
            disbursed between all the lines. If not, the landed cost needs to be corrected before
            leaving
            It also verifies that attachements have been entered for all the parts which require them.
            </summary>
            <param name="vendorNum">Vendor Number of the Receipt</param>
            <param name="purPoint">Purchase Point of the Receipt</param>
            <param name="packSlip">Packing Slip number of the Receipt</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.CheckPOClosedInfo(System.Int32,System.String,System.String,System.String@)">
            <summary>
            This method checks how many numbers of PO Releases are closed in the current PONum
            </summary>
            <param name="vendorNum">Vendor Number of Receipt</param>
            <param name="purPoint">Purchase Point of Receipt</param>
            <param name="packSlip">Packing Slip number of Receipt</param>
            <param name="warnMsg">Warning message to display the number of POReleases closed</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.CheckReceivedComplete(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String,System.String,System.Int32,System.Boolean,System.String@)">
            <summary>
            This method is to be run after the ReceivedComplete flag is changed. Any questions
            returned require a yes/no response from the user.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packSlip">Receipt Packing Number</param>
            <param name="packLine">Receipt Line to check</param>
            <param name="receivedComplete"></param>
            <param name="vMessage">Question asking if the user is sure they want to set/clear the flag</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.CheckSupplierPrice(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String,System.String,System.Int32,System.Decimal,System.String@)">
            <summary>
            This method validates that if Supplier Price was change it satisfies Company options.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packSlip">Receipt Packing Number</param>
            <param name="packLine">Receipt Line to check</param>
            <param name="suppPrice">new Supplier Price</param>
            <param name="warningMsg">Reason the Supplier Price is invalid</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.CommitRcvDtl(System.Int32,System.String,System.String,Epicor.Mfg.BO.ReceiptDataSet)">
            <summary>
            This method creates the Lines Received from MassReceipt option directly
            into the DB. This was done for performance purposes.
            </summary>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packSlip">Receipt Packing Number</param>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.CreateMassReceipts(System.Int32,System.String,System.String,System.Decimal,System.String,Epicor.Mfg.BO.ReceiptDataSet)">
            <summary>
            This method is used to populate the ShipDtl datatable for Mass Receipts
            and Intercompany Receipt linking
            </summary>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packSlip">Receipt Packing Number</param>
            <param name="intQueId">Intercompany Queue ID for Intercompany Receipts</param>
            <param name="poNum">PO Number for Purchase Order Receipts</param>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.DisburseLandedCost(System.Int32,System.String,System.String)">
            <summary>
            This method is used to disburse the Total Landed Cost across the receipt details.
            The RcvDtl records will be updated to distribute the receipt Indirect Costs according
            to the specified disburse method. The Specific DutyAmt if available will be divided
            equally among lines or by the percentage of the line's duties against total duties.
            </summary>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packSlip">Receipt Packing Number</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetDtlAssemblyInfo(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            This method updates the dataset when the AssemblySeq number changes
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packSlip">Receipt Packing Number</param>
            <param name="packLine">Receipt Line to check</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetDtlJobInfo(System.Int32,System.String,System.String,System.Int32,System.String,Epicor.Mfg.BO.ReceiptDataSet)">
            <summary>
            This method default the Job Information when the RcvDtl.JobNum field changes
            </summary>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packSlip">Receipt Packing Number</param>
            <param name="packLine">Receipt Line to check</param>
            <param name="jobNum">The new Job Number</param>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetDtlLotInfo(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String,System.String,System.Int32,System.String,System.String@,System.String@)">
            <summary>
            This method updates the unitCost when the LotNum field changes
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packSlip">Receipt Packing Number</param>
            <param name="packLine">Receipt Line to check</param>
            <param name="lotNum">New Lot Number to validate</param>
            <param name="questionMsg">Asks if user want to create new lot</param>
            <param name="errorMsg">Tells user if they can't create a new lot</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetDtlPartInfo(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String,System.String,System.Int32,System.String)">
            <summary>
            This method updates the dataset when the part number has changed.
            CheckDtlSSN should be run first.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packSlip">Receipt Packing Number</param>
            <param name="packLine">Receipt Line to check</param>
            <param name="partNum">Proposed partNum value</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetDtlPOInfo(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method updates the dataset when the detail Line PONum field has changed.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packSlip">Receipt Packing Number</param>
            <param name="packLine">Receipt Line to check</param>
            <param name="poNum">New PO Number</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetDtlPOLineInfo(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String,System.String,System.Int32,System.Int32,System.String@)">
            <summary>
            This method updates the dataset when the detail Line POLine field has changed.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packSlip">Receipt Packing Number</param>
            <param name="packLine">Receipt Line to check</param>
            <param name="poLine">New POLine Number</param>
            <param name="serialWarning">Warning message if the receipt line contains serial numbers</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetDtlPORelInfo(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method updates the dataset when the detail Line PORelNum field has changed.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packSlip">Receipt Packing Number</param>
            <param name="packLine">Receipt Line to check</param>
            <param name="poRelNum">New PO Release Number</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetDtlQtyInfo(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String,System.String,System.Int32,System.Decimal,System.String,System.String,System.String@)">
            <summary>
            This method updates the dataset when the InputOurQty field changes
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packSlip">Receipt Packing Number</param>
            <param name="packLine">Receipt Line to check</param>
            <param name="inputOurQty">Proposed change to the Input qty field</param>
            <param name="inputIUM">Proposed change to the IUM field</param>
            <param name="whichField">Indicates either 'QTY' or 'UOM' field changed</param>
            <param name="warnMsg">A warning message for users. Does not stop processing</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetDtlRcvdToInfo(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String,System.String,System.Int32,System.String@)">
            <summary>
            This method is run when the ReceivedTo field is changed after the CheckSSN method is called
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packSlip">Receipt Packing Number</param>
            <param name="packLine">Receipt Line to check</param>
            <param name="rcvdTo">Proposed ReceivedTo value</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetDtlSeqInfo(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String,System.String,System.Int32,System.Int32,System.String@)">
            <summary>
            This method updates the dataset when the JobSeq field changes. Fields will be defaulted
            from JobMtl for PUR-MTL and from JobOper for PUR-SUB.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
            <param name="vendorNum">Vendor Number</param>
            <param name="purPoint">Purchase Point</param>
            <param name="packSlip">Packing slip number</param>
            <param name="packLine">Receipt Line to check</param>
            <param name="jobSeq">Proposed JobSeq change</param>
            <param name="serialWarning">Warning message if the receipt line contains serial numbers</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetDtlVenQtyInfo(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String,System.String,System.Int32,System.Decimal,System.String@)">
            <summary>
            This method updates the dataset when the VendorQty field changes
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
            <param name="vendorNum">Vendor Number</param>
            <param name="purPoint">Purchase Point</param>
            <param name="packSlip">Packing slip number</param>
            <param name="packLine">Receipt Line to check</param>
            <param name="vendorQty">Proposed VendorQty value</param>
            <param name="warnMsg">A warning message for users. Does not stop processing</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetListReceipts(System.String,System.Int32,System.Int32,System.Boolean@)">
            <param name="whereClauseRcvDtl">Whereclause for RcvDtl table.</param>
            <param name="pageSize">Page size.</param>
            <param name="absolutePage">Absolute page.</param>
            <param name="morePages">More pages.</param>
            <returns type="Epicor.Mfg.BO.ReceiptDataSet">Epicor.Mfg.BO.InvcCustTrkDataSet</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetLotImportInfo(System.String,System.String,System.String@,System.String@)">
            <summary>
            This method should be called from Container Receipt Entry and Receipt Entry when the
            ImportNumber or ImportedFromDesc values have changed for a receipt line.
            </summary>
            <param name="inPartNum">PartNum</param>
            <param name="inLotNum">LotNum</param>
            <param name="outImportNum">ImportNum</param>
            <param name="outImportedFromDesc">ImportedFromDesc</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetLotAllImportInfo(System.String,System.String,System.String@,System.Int32@,System.String@)">
            <summary>
            This method should be called from Container Receipt Entry and Receipt Entry when the
            ImportNumber or ImportedFrom or ImportedFromDesc values have changed for a receipt line.
            </summary>
            <param name="inPartNum">PartNum</param>
            <param name="inLotNum">LotNum</param>
            <param name="outImportNum">ImportNum</param>
            <param name="outImportedFrom">ImportedFrom</param>
            <param name="outImportedFromDesc">ImportedFromDesc</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetNewRcvDtlMisc(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String,System.String)">
            <summary>
            This method creates a new Miscellaneous receipt line entry
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
            <param name="vendorNum"></param>
            <param name="purPoint"></param>
            <param name="packSlip"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetPartTranPKs(System.String,System.Int32,System.Int32,System.String@)">
            <summary>
            Updates Receipt data set with PendingDtl.
            </summary>
            <param name="packSlip">The PackSlip number </param>
            <param name="poNum">The PO number </param>
            <param name="vendorNum">The Vendor number </param>
            <param name="partTranPKs">The PartTranPKs number </param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetPendingDtl(Epicor.Mfg.BO.ReceiptDataSet,System.Int32)">
            <summary>
            Updates Receipt data set with PendingDtl.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
            <param name="inPONum">The PO number</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetPOInfo(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.Int32@,System.String@)">
            <summary>
            This method returns default information for the PO Number and the new Vendor ID
            information.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
            <param name="poNum">Proposed Purchase Order Number</param>
            <param name="vendorNum">Numeric Vendor ID assigned to the PO</param>
            <param name="purPoint">Default Purchase Point assigned to the PO</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetPurPointInfo(Epicor.Mfg.BO.ReceiptDataSet,System.String@)">
            <summary>
            This method returns default information for the Vendor Purchase Point.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
            <param name="purPoint"> Proposed Purchase Point value</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetSelectSerialNumbersParams(System.String,System.Decimal,System.String,System.Int32,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.String)">
            <param name="ipPartNum">ipPartNum</param>
            <param name="ipQuantity">ipQuantity</param>
            <param name="ipUOM">ipUOM</param>
            <param name="ipVendNum">ipVendNum</param>
            <param name="ipVendPP">ipVendPP</param>
            <param name="ipPackSlip">ipPackSlip</param>
            <param name="ipPackSlipLine">ipPackSlipLine</param>
            <param name="ipJobNum">ipJobNum</param>
            <param name="ipAsmSeq">ipAssmSeq</param>
            <param name="ipSubOprSeq">ipSubOprSeq</param>
            <param name="ipReceivedTo">ipReceivedTo</param>
            <returns type="Epicor.Mfg.BO.SelectSerialNumbersParamsDataSet"></returns>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.GetVendorInfo(Epicor.Mfg.BO.ReceiptDataSet,System.String,System.Int32@,System.String@)">
            <summary>
            This method returns default information for the Vendor.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
            <param name="vendorID">Proposed Vendor ID value</param>
            <param name="vendorNum">Numeric Vendor ID</param>
            <param name="purPoint">default Purchase Point for Vendor</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.HHCanEditPackSlip(System.Int32,System.String,System.Boolean@)">
            <summary>
            This method was developed for HandHeld version to validate if a
            pack slipt exist. In the handheld version users can't edit the lines.
            </summary>
            <param name="piPONum">A valid PONumber</param>
            <param name="pcPackSlip">Packing slip to check if this one was received</param>
            <param name="pbIsEdit"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.HHValRecDocReq(System.String,System.String,System.String@)">
            <summary>
            This method is to be called by the Hand Held PO Receipt program.
            It can be called before or after calling the update for the RcvDtl.
            It checks to see if receipt documents are required for a given Part/Lot number.
            If they are then message text is returned in the infoMsg parameter.
            The client displays this in a message box.
            Note: For Hand Held this is only an informational and not an exception.
            </summary>
            <param name="partNum">Part number</param>
            <param name="lotNum">Part Lot number</param>
            <param name="infoMsg">Contains the text for the message box</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.ImportReceipt(System.Decimal,System.Int32@,System.String@,System.String@)">
            <summary>
            This method imports the Receipt Head record from the IMRcvHead table. It returns
            the unique key information on the newly created Receipt header needed to import
            the detail lines. The detail records are imported by processing Mass Receipts for
            the same IntQueId as indicated here.
            </summary>
            <param name="intQueId">Unique key of IMRcvHead</param>
            <param name="vendorNum">Vendor Number of Receipt</param>
            <param name="purPoint">Purchase Point of Receipt</param>
            <param name="packSlip">Packing Slip number of Receipt</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.InitializeLandedCost(System.Int32,System.String,System.String,System.String@,System.String@)">
            <summary>
            This method is used to populate the MassReceipt dataset for use in Landed Costs
            it also returns the default recovery account information
            </summary>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packSlip">Receipt Packing Number</param>
            <returns type="Epicor.Mfg.BO.MassReceiptDataSet">Result Set</returns>
            <param name="lcComment">Landed Cost Comments</param>
            <param name="lcReference">Landed Cost Reference</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.LCChangeLCAmt(Epicor.Mfg.BO.MassReceiptDataSet,System.String,System.Int32)">
            <summary>
            This method updates the dataset record when the LCAmt field changes
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.MassReceiptDataSet">MassRecieptDataSet</param>
            <param name="packSlip">Receipt Pack Number</param>
            <param name="packLine">Receipt Line Number</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.OnChangeContainerImportFld(Epicor.Mfg.BO.ReceiptDataSet)">
            <summary>
            This method is to be run from Container Receipt Entry when import Number or Imported From values
            are changed on the Container.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.OnChangedDtlPOTransValue(System.Int32,System.String,System.String,System.Int32,Epicor.Mfg.BO.ReceiptDataSet)">
             <summary>
             This method should be invoked when the POTransValue of RcvDtl has changed.
            
             </summary>
             <param name="vendorNum">Receipt Vendor Number</param>
             <param name="purPoint">Receipt Purchase Point</param>
             <param name="packSlip">Receipt Packing Number</param>
             <param name="packLine">Receipt Line to check</param>
             <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.OnChangeDtlCommodity(System.Int32,System.String,System.String,System.Int32,System.String,Epicor.Mfg.BO.ReceiptDataSet)">
             <summary>
             This method should be invoked when the CommodityCode in RcvDtl changes.
             This method will validate the commodity code and get defaults.
            
             </summary>
             <param name="vendorNum">Receipt Vendor Number</param>
             <param name="purPoint">Receipt Purchase Point</param>
             <param name="packSlip">Receipt Packing Number</param>
             <param name="packLine">Receipt Line to check</param>
             <param name="ipCommCode">Proposed Commodity Code to be validated</param>
             <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.OnChangeDtlCountryNum(System.Int32,System.String,System.String,System.Int32,System.Int32,Epicor.Mfg.BO.ReceiptDataSet)">
             <summary>
             This method should be invoked when the OrigCountryNum in RcvDtl changes.
             This method will validate country of origin.
            
             </summary>
             <param name="vendorNum">Receipt Vendor Number</param>
             <param name="purPoint">Receipt Purchase Point</param>
             <param name="packSlip">Receipt Packing Number</param>
             <param name="packLine">Receipt Line to check</param>
             <param name="ipCountryNum">Proposed Country of Origin to be validated</param>
             <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.OnChangeDtlImportedFrom(System.Int32,System.String,System.String,System.Int32,System.Int32,Epicor.Mfg.BO.ReceiptDataSet)">
             <summary>
             This method should be invoked when the ImportedFrom in RcvDtl changes.
            
             </summary>
             <param name="vendorNum">Receipt Vendor Number</param>
             <param name="purPoint">Receipt Purchase Point</param>
             <param name="packSlip">Receipt Packing Number</param>
             <param name="packLine">Receipt Line to check</param>
             <param name="ipImportedFrom">Proposed ImportedFrom to be validated</param>
             <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.OnChangeDtlLCIndCost(System.Int32,System.String,System.String,System.Int32,System.Decimal,Epicor.Mfg.BO.ReceiptDataSet)">
             <summary>
             This method should be invoked when the LCIndCost in RcvDtl changes.
             This method will validate the manually disbursed indirect cost.
            
             </summary>
             <param name="vendorNum">Receipt Vendor Number</param>
             <param name="purPoint">Receipt Purchase Point</param>
             <param name="packSlip">Receipt Packing Number</param>
             <param name="packLine">Receipt Line to check</param>
             <param name="ipLCIndCost">Proposed LC Indirect Cose to be validated</param>
             <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.OnChangeDtlReceived(System.Int32,System.String,System.String,System.Int32,System.Boolean,Epicor.Mfg.BO.ReceiptDataSet)">
             <summary>
             This method should be invoked when the Received flag in RcvDtl has changed.
            
             </summary>
             <param name="vendorNum">Receipt Vendor Number</param>
             <param name="purPoint">Receipt Purchase Point</param>
             <param name="packSlip">Receipt Packing Number</param>
             <param name="packLine">Receipt Line to check</param>
             <param name="ipReceived">Received flag</param>
             <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.OnChangeDtlSupplierPrice(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            This method should be invoked when the Supplier Price in RcvDtl changes.
            This method calculates Base and Reporting values.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packSlip">Receipt Packing Number</param>
            <param name="packLine">Receipt Line to check</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.OnChangeDtlUpliftPercent(System.Int32,System.String,System.String,System.Int32,System.Decimal,Epicor.Mfg.BO.ReceiptDataSet)">
             <summary>
             This method should be invoked when the UpliftPercent in RcvDtl changes.
             This method will validate the UpliftPercent and calculate the Uplift Indirect Cost.
            
             </summary>
             <param name="vendorNum">Receipt Vendor Number</param>
             <param name="purPoint">Receipt Purchase Point</param>
             <param name="packSlip">Receipt Packing Number</param>
             <param name="packLine">Receipt Line to check</param>
             <param name="ipUpliftPercent">Proposed Uplift Percentage to be validated</param>
             <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.OnChangeDutyTariffCode(System.Int32,System.String,System.String,System.Int32,System.Int32,System.String,Epicor.Mfg.BO.ReceiptDataSet)">
             <summary>
             This method should be invoked when the Tariff Code changes. This method will validate
             the tariffcode and defaults the duty amount.
            
             </summary>
             <param name="vendorNum">Receipt Vendor Number</param>
             <param name="purPoint">Receipt Purchase Point</param>
             <param name="packSlip">Receipt Packing Number</param>
             <param name="packLine">Receipt Line to check</param>
             <param name="dutySeq">Receipt Duty Sequence</param>
             <param name="ipTariffCode">Proposed Tariff Code to be validated</param>
             <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.OnChangeHdrImportedFrom(System.Int32,System.String,System.String,System.Int32,Epicor.Mfg.BO.ReceiptDataSet)">
             <summary>
             This method should be invoked when the ImportedFrom in RcvHead has changed.
            
             </summary>
             <param name="vendorNum">Receipt Vendor Number</param>
             <param name="purPoint">Receipt Purchase Point</param>
             <param name="packSlip">Receipt Packing Number</param>
             <param name="iImportedFrom">ImportedFrom</param>
             <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.OnChangeHdrReceived(System.Int32,System.String,System.String,System.Boolean,Epicor.Mfg.BO.ReceiptDataSet)">
             <summary>
             This method should be invoked when the Received flag in RcvHead has changed.
            
             </summary>
             <param name="vendorNum">Receipt Vendor Number</param>
             <param name="purPoint">Receipt Purchase Point</param>
             <param name="packSlip">Receipt Packing Number</param>
             <param name="ipReceived">Received flag</param>
             <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.OnChangeInspReq(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            This method updates the dataset when the Inspection Required flag changes
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
            <param name="vendorNum">Vendor Number</param>
            <param name="purPoint">Purchase Point</param>
            <param name="packSlip">Packing slip number</param>
            <param name="packLine">Receipt Line</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.OnChangeMiscApplyDate(System.Int32,System.String,System.String,System.Int32,System.Nullable{System.DateTime},Epicor.Mfg.BO.ReceiptDataSet)">
             <summary>
             This method should be invoked when the Apply Date in RcvMisc changes.
             This method will validate the date and get new exchange rate.
            
             </summary>
             <param name="vendorNum">Receipt Vendor Number</param>
             <param name="purPoint">Receipt Purchase Point</param>
             <param name="packSlip">Receipt Packing Number</param>
             <param name="miscSeq">Receipt Indirect Cost Sequence</param>
             <param name="ipApplyDate">Proposed Apply Date to be validated</param>
             <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.OnChangeMiscCharge(System.Int32,System.String,System.String,System.Int32,System.String,Epicor.Mfg.BO.ReceiptDataSet)">
             <summary>
             This method should be invoked when the Miscellaneous Charge ID changes. This
             method will validate the misc. charge and pull in the new default information.
            
             </summary>
             <param name="vendorNum">Receipt Vendor Number</param>
             <param name="purPoint">Receipt Purchase Point</param>
             <param name="packSlip">Receipt Packing Number</param>
             <param name="miscSeq">Receipt Indirect Cost Sequence</param>
             <param name="ipChargeID">Proposed PurMisc ID to be validated</param>
             <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.OnChangeMiscCurrencyCode(System.Int32,System.String,System.String,System.Int32,System.String,Epicor.Mfg.BO.ReceiptDataSet)">
             <summary>
             This method should be invoked when the Currency Code in RcvMisc changes.
             This method will validate the currency code and pull in the new default information.
            
             </summary>
             <param name="vendorNum">Receipt Vendor Number</param>
             <param name="purPoint">Receipt Purchase Point</param>
             <param name="packSlip">Receipt Packing Number</param>
             <param name="miscSeq">Receipt Indirect Cost Sequence</param>
             <param name="ipCurrCode">Proposed Currency Code to be validated</param>
             <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.OnChangeMiscDocActualAmt(System.Int32,System.String,System.String,System.Int32,System.Decimal,Epicor.Mfg.BO.ReceiptDataSet)">
             <summary>
             This method should be invoked when the RcvMisc.ActualAmt changes. This
             method will validate the amount and convert it to the base currency.
            
             </summary>
             <param name="vendorNum">Receipt Vendor Number</param>
             <param name="purPoint">Receipt Purchase Point</param>
             <param name="packSlip">Receipt Packing Number</param>
             <param name="miscSeq">Receipt Indirect Cost Sequence</param>
             <param name="ipDocActualAmt">Proposed Actual Amount in document currency</param>
             <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.OnChangeMiscExchangeRate(System.Int32,System.String,System.String,System.Int32,System.Decimal,Epicor.Mfg.BO.ReceiptDataSet)">
             <summary>
             This method should be invoked when the Currency Exchange Rate in RcvMisc changes.
            
             </summary>
             <param name="vendorNum">Receipt Vendor Number</param>
             <param name="purPoint">Receipt Purchase Point</param>
             <param name="packSlip">Receipt Packing Number</param>
             <param name="miscSeq">Receipt Indirect Cost Sequence</param>
             <param name="ipExchangeRate">Proposed Currency Exchange Rate to be validated</param>
             <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.OnChangeMiscInvoiceLine(System.Int32,System.String,System.String,System.Int32,System.Int32,Epicor.Mfg.BO.ReceiptDataSet)">
            <summary>
            This method should be invoked when the Invoice Line in RcvMisc changes.
            This method will validate the invoice line and pull in the new default information.
            </summary>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packSlip">Receipt Packing Number</param>
            <param name="miscSeq">Receipt Indirect Cost Sequence</param>
            <param name="ipInvLine">The AP Invoice Line to be validated</param>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.OnChangeMiscInvoiceNum(System.Int32,System.String,System.String,System.Int32,System.String,Epicor.Mfg.BO.ReceiptDataSet)">
            <summary>
            This method should be invoked when the Invoice Number in RcvMisc changes.
            This method will validate the invoice number and pull in the new default information.
            </summary>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packSlip">Receipt Packing Number</param>
            <param name="miscSeq">Receipt Indirect Cost Sequence</param>
            <param name="ipInvNum">The AP Invoice Number to be validated</param>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.OnChangeMiscMscNum(System.Int32,System.String,System.String,System.Int32,System.Int32,Epicor.Mfg.BO.ReceiptDataSet)">
            <summary>
            This method should be invoked when the MscNum in RcvMisc changes.
            This method will validate the MscNum and pull in the new default information.
            </summary>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packSlip">Receipt Packing Number</param>
            <param name="miscSeq">Receipt Indirect Cost Sequence</param>
            <param name="ipMscNum">The AP Invoice Line Miscellaneous Sequence Number to be validated</param>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.OnChangeMiscPercent(System.Int32,System.String,System.String,System.Int32,System.Decimal,Epicor.Mfg.BO.ReceiptDataSet)">
            <summary>
            This method should be invoked when the RcvMisc.Percentage changes.
            This method will calculate the amount and convert it to the base currency.
            </summary>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packSlip">Receipt Packing Number</param>
            <param name="miscSeq">Receipt Indirect Cost Sequence</param>
            <param name="ipPercent">Proposed Actual Amount in document currency</param>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.OnChangeMiscRateGrp(System.Int32,System.String,System.String,System.Int32,System.String,Epicor.Mfg.BO.ReceiptDataSet)">
             <summary>
             This method should be invoked when the Currency Rate Group in RcvMisc changes.
             This method will validate the rate group and get new exchange rate.
            
             </summary>
             <param name="vendorNum">Receipt Vendor Number</param>
             <param name="purPoint">Receipt Purchase Point</param>
             <param name="packSlip">Receipt Packing Number</param>
             <param name="miscSeq">Receipt Indirect Cost Sequence</param>
             <param name="ipRateGrpCode">Proposed Currency Rate Group Code to be validated</param>
             <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.OnChangeMiscVendor(System.Int32,System.String,System.String,System.Int32,System.String,Epicor.Mfg.BO.ReceiptDataSet)">
            <summary>
            This method should be invoked when the vendor ID in RcvMisc changes.
            This method will validate the vendor and pull in the new default vendor information.
            </summary>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packSlip">Receipt Packing Number</param>
            <param name="miscSeq">Receipt Indirect Cost Sequence</param>
            <param name="vendID">Proposed vendor ID to be validated</param>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.PreUpdate(Epicor.Mfg.BO.ReceiptDataSet,System.Boolean@)">
            <summary>
            This method will return a record in the LegalNumberGenOpts datatable if
            a legal number is required for this transaction. The RequiresUserInput
            flag will indicate if this legal number requires input from the user. If
            it does, the LegalNumberPrompt business objects needs to be called to
            gather that information. This method should be called when the user
            saves the record but before the Update method is called.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
            <param name="requiresUserInput">Indicates if the legal number requires user input</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.processIM(System.Decimal,System.String,Epicor.Mfg.BO.ReceiptDataSet)">
            <summary>
            Finish processing a successful IC import
            </summary>
            <param name="pintQueId">A valid IntQueId</param>
            <param name="curpackSlip">Packing slip number</param>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.ProcessLandedCosts(System.Int32,System.String,System.String)">
            <summary>
            This method is used to process the Landed Costs into the RcvHead and RcvDtl tables
            All the MassReceipt records need to be marked as modified for this
            </summary>
            <param name="vendorNum">Receipt Vendor Number</param>
            <param name="purPoint">Receipt Purchase Point</param>
            <param name="packSlip">Receipt Packing Number</param>
            <returns type="Epicor.Mfg.BO.ReceiptDataSet">Result Set </returns>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.ReceiveAll(Epicor.Mfg.BO.ReceiptDataSet)">
            <summary>
            This method updates the Quantity for the lines created from MassReceipt
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.ReceiveAllLines(System.Boolean,Epicor.Mfg.BO.ReceiptDataSet)">
             <summary>
             Sets ttRcvDtl.Received to true in all lines selected for MassReceipt.
            
             </summary>
             <param name="ipReceived">Received flag</param>
             <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set </param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.ReceiveContainer(Epicor.Mfg.BO.ReceiptDataSet,System.Int32)">
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">Epicor.Mfg.BO.ReceiptDataSet</param>
            <param name="inContainerID">ContainerID</param>
            <returns type="Epicor.Mfg.BO.ContainerTrackingDataSet">Epicor.Mfg.BO.ContainerTrackingDataSet</returns>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.ReceiveContainerUpdate(Epicor.Mfg.BO.ReceiptDataSet,System.Int32,System.String,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Mass Receive the po lines on a container.
            </summary>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">Epicor.Mfg.BO.ReceiptDataSet</param>
            <param name="inContainerID"></param>
            <param name="inCreateNewPoRels"></param>
            <param name="outEshReceived"></param>
            <param name="outPartialReceipt"></param>
            <param name="outReceiveAll"></param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.ResetLandedCostDisbursements(System.Int32,System.String,System.String,System.String)">
            <summary>
            Initialize landed cost amounts to 0 and updates the landed cost disburse method.
            </summary>
            <param name="ipVendorNum">Vendor Number to reset</param>
            <param name="ipPurPoint">Purchase Point to reset</param>
            <param name="ipPackSlip">Packing Slip Number to reset</param>
            <param name="ipDisburseMethod">Landed Cost Disbursment method</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.SetPrimaryBin(System.Int32,System.String,System.String,System.Int32,Epicor.Mfg.BO.ReceiptDataSet)">
            <summary>
            Set the Part Warehouse's Primary Bin when the Warehouse is changed.
            </summary>
            <param name="vendorNum">Vendor Number</param>
            <param name="purPoint">Purchase Point Number</param>
            <param name="packSlip">Receipt Packing Slip Number</param>
            <param name="packLine">Receipt Line number</param>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.SetToLocation(System.Int32,System.String,System.String,System.Int32,Epicor.Mfg.BO.ReceiptDataSet)">
            <summary>
            This method gets the Warehouse and Bin to the defaults for the Part/Job
            </summary>
            <param name="vendorNum">Vendor Number</param>
            <param name="purPoint">Purchase Point Number</param>
            <param name="packSlip">Receipt Packing Slip Number</param>
            <param name="packLine">Receipt Line number</param>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.UpdateMaster(System.Boolean,System.Boolean,System.Int32,System.String,System.String,System.Int32,System.String@,System.String@,System.String@,System.String@,System.Boolean,System.String@,System.String@,System.String@,System.Boolean,System.String@,System.Boolean,System.Boolean@,System.Boolean,System.Boolean@,System.Boolean,System.String,System.String,System.Boolean,System.Boolean@,Epicor.Mfg.BO.ReceiptDataSet)">
            <summary>
            </summary>
            <param name="runChkLCAmtBeforeUpdate">bool to determine whether to run certain code segment</param>
            <param name="runChkHdrBeforeUpdate">bool to determine whether to run certain code segment</param>
            <param name="ipVendorNum">current vendor number</param>
            <param name="ipPurPoint">current PurPoint</param>
            <param name="ipPackSlip">current packSlip</param>
            <param name="ipPackLine">current packLine</param>
            <param name="cLCAmtMessage">output message from chkLCAmtBeforeUpdate code</param>
            <param name="opUpliftWarnMsg">output message from CheckHdrBeforeUpdate code</param>
            <param name="opReceiptWarnMsg">output message from CheckHdrBeforeUpdate code</param>
            <param name="opArriveWarnMsg">output message from CheckHdrBeforeUpdate code</param>
            <param name="lRunChkDtl">bool to determine whether to run certain code segment</param>
            <param name="qMessageStr">output message from CheckDtlBeforeUpdate code</param>
            <param name="sMessageStr">output message from CheckDtlBeforeUpdate code</param>
            <param name="lcMessageStr">output message from CheckDtlBeforeUpdate code</param>
            <param name="lRunChkDtlCompliance">bool to determine whether to run certain code segment</param>
            <param name="qDtlComplianceMsgStr">output message from runCheckDtlCompliance code</param>
            <param name="lRunCheckCompliance">bool to determine whether to run certain code segment</param>
            <param name="lCompliant">bool to determine if compliance was met</param>
            <param name="lRunPreUpdate">bool to determine whether to run certain code segment</param>
            <param name="lRequiresUserInput">bool to show whether legal number input is required</param>
            <param name="lRunCreatePartLot">bool to determine whether to run certain code segment</param>
            <param name="partNum">current partNum</param>
            <param name="lotNum">current lotNum</param>
            <param name="lOkToUpdate">bool to determine if the Update should be run in this process</param>
            <param name="lUpdateWasRun">bool to show whether Update was run and if AcceptChanges should be performed in the adapter</param>
            <param name="ds" type="Epicor.Mfg.BO.ReceiptDataSet">The Receipt data set</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.ValidateMRPONum(System.Int32,System.Int32,System.String@)">
            <summary>
            This method validates that the PO Number is a valid PO before the UI calls
            CreateMassReceipts. Does not need to be run for Intercompany Receipts.
            </summary>
            <param name="poNum">The PO Number to validate</param>
            <param name="vendorNum">The Receipt Header Vendor's Number</param>
            <param name="errorMsg">Reason the PO Number is invalid</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.ValidateSN(System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.String,System.Int32)">
            <param name="ipPartNum">Part Number</param>
            <param name="ipSerialNo">Serial Number</param>
            <param name="ipVendorNum">Vendor Number</param>
            <param name="ipJobNum">Job Number</param>
            <param name="ipAsmSeq">Vendor Number</param>
            <param name="ipSubOprSeq">Job Operation Number</param>
            <param name="ipPackSlip">Pack Slip</param>
            <param name="ipPackLine">Pack Slip Line</param>
        </member>
        <member name="M:Epicor.Mfg.IF.IReceipt.IsContainerReceived(System.Int32)">
            <remarks>
            &amp;QTableName - MANDATORY - Name of table to find
            &amp;QLock - type of lock to put on record NO-LOCK (default) or EXCLUSIVE-LOCK
            &amp;QWhere - MANDATORY - criteria to find record
            &amp;QFind - type of find to perform, unique, first, next or last
            &amp;Columns - List of columns
            </remarks>
        </member>
        <member name="T:Epicor.Mfg.BO.LandedCostTGLCDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.LandedCostTGLCDataSet.LandedCostTGLCDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.LandedCostTGLCDataSet.LandedCostTGLCRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.LandedCostTGLCDataSet.LandedCostTGLCRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.RcvHeadListDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.RcvHeadListDataSet.RcvHeadListDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.RcvHeadListDataSet.RcvHeadListRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.RcvHeadListDataSet.RcvHeadListRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.MassReceiptDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.MassReceiptDataSet.MassReceiptDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.MassReceiptDataSet.MassReceiptRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.MassReceiptDataSet.MassReceiptRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.SelectSerialNumbersParamsDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.SelectSerialNumbersParamsDataSet.SelectSerialNumbersParamsDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.SelectSerialNumbersParamsDataSet.SelectSerialNumbersParamsRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.SelectSerialNumbersParamsDataSet.SelectSerialNumbersParamsRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.RcvHeadDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.RcvHeadAttchDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.RcvDtlDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.RcvDtlAttchDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.RcvDutyDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.RcvMiscDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.LegalNumGenOptsDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.PendingRcvDtlDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.SelectedSerialNumbersDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.SNFormatDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.SupplierXRefDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.RcvHeadRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.RcvHeadAttchRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.RcvDtlRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.RcvDtlAttchRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.RcvDutyRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.RcvMiscRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.LegalNumGenOptsRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.PendingRcvDtlRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.SelectedSerialNumbersRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.SNFormatRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.SupplierXRefRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.RcvHeadRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.RcvHeadAttchRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.RcvDtlRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.RcvDtlAttchRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.RcvDutyRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.RcvMiscRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.LegalNumGenOptsRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.PendingRcvDtlRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.SelectedSerialNumbersRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.SNFormatRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:Epicor.Mfg.BO.UpdExtReceiptDataSet.SupplierXRefRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
    </members>
</doc>
